remove invalid parenthesis

Rat in a maze
def findPaths(mat, n):
    def is_valid(r, c):
        return 0 <= r < n and 0 <= c < n and mat[r][c] == 1 and not visited[r][c]

    def backtrack(r, c, path):
        if r == n - 1 and c == n - 1:
            result.append(path)
            return

        for dir_idx in range(4):
            dr, dc = dirs[dir_idx]
            nr, nc = r + dr, c + dc
            move = dir_letters[dir_idx]

            if is_valid(nr, nc):
                visited[nr][nc] = True
                backtrack(nr, nc, path + move)
                visited[nr][nc] = False  # backtrack

    if mat[0][0] == 0 or mat[n-1][n-1] == 0:
        return []

    result = []
    visited = [[False] * n for _ in range(n)]
    dirs = [(1, 0), (0, -1), (0, 1), (-1, 0)]  # D, L, R, U
    dir_letters = ['D', 'L', 'R', 'U']

    visited[0][0] = True
    backtrack(0, 0, "")
    return sorted(result)

multi backtrack
from typing import List

class Solution:
    def findShortestPath(self, mat: List[List[int]]) -> int:
        m, n = len(mat), len(mat[0])
        dirs = [(-1,0), (0,-1), (1,0), (0,1)]

        def is_safe(r, c):
            if 0 <= r < m and 0 <= c < n and mat[r][c] == 1 and not visited[r][c]:
                for dr, dc in dirs:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < m and 0 <= nc < n and mat[nr][nc] == 0:
                        return False
                return True
            return False

        def backtrack(r, c, count):
            if c == n - 1:
                res.append(count)
                return
            for dr, dc in dirs:
                nr, nc = r + dr, c + dc
                if is_safe(nr, nc):
                    visited[nr][nc] = True
                    backtrack(nr, nc, count + 1)
                    visited[nr][nc] = False

        res = []
        visited = [[False] * n for _ in range(m)]
        for i in range(m):
            if is_safe(i, 0):
                visited[i][0] = True
                backtrack(i, 0, 1)
                visited[i][0] = False

        return min(res) if res else -1

from collections import defaultdict

class Solution:
    def check(self, n, m, edges): 
        graph = defaultdict(list)

        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        def backtrack(node, count):
            if count == n:
                return True
            for nei in graph[node]:
                if not visited[nei]:
                    visited[nei] = True
                    if backtrack(nei, count + 1):
                        return True
                    visited[nei] = False
            return False

        for i in range(1, n + 1):
            visited = [False] * (n + 1)
            visited[i] = True
            if backtrack(i, 1):
                return 1  # Hamiltonian path exists
        return 0  # No path found

def combinationSum(self, arr, target):
    def backtrack(start, path, total):
        if total == target:
            res.append(path[:])
            return
        if total > target:
            return
        
        for i in range(start, len(arr)):
            path.append(arr[i])
            backtrack(i, path, total + arr[i])  # reuse allowed if not allowed use i+1
            path.pop()

    res = []
    arr = sorted(set(arr))  # optional: remove duplicates and sort
    backtrack(0, [], 0)
    return res

def palinParts (self, s):
        # code here
        def is_Palindrome(s):
            return s == s[::-1]
        
        def backtrack(idx,path):
            if idx == len(s):
                res.append(path[:])
                return
            
            temp = ""
            for i in range(idx,len(s)):
                temp += s[i]
                if is_Palindrome(temp):
                    path.append(temp)
                    backtrack(i+1,path)
                    path.pop()
            
        res = []
        backtrack(0,[])
        return res

CrossWord Puzzle

1. Preprocess the Grid to Identify All Valid Slots
A slot is a contiguous sequence of - cells where a word can be placed.
We extract:
Horizontal slots: scan each row for contiguous -.
Vertical slots: scan each column for contiguous -.
Store each slot as:
(start_row, start_col, direction, length)

2. Backtracking Algorithm
We try placing each unused word into each slot (matching length), then recurse.
Key Steps:
For a given slot, try every unused word of matching length.
If the word can be placed (i.e., cells are either - or already contain the same character), place it.
Recurse to the next slot.
If recursion fails, backtrack by undoing the placement and trying the next possibility.
If all slots are filled and all words are used â†’ Success.

class Solution:
    def solveNQueensPerm(self, n):
        def backtrack(col, path):
            if col == n:
                res.append(path[:])
                return
            for row in range(1, n+1):  # 1-based row index
                if row in used_rows:
                    continue
                valid = True
                for c, r in enumerate(path):  # previous queens
                    if abs(r - row) == abs(c - col):
                        valid = False
                        break
                if valid:
                    used_rows.add(row)
                    path.append(row)
                    backtrack(col + 1, path)
                    path.pop()
                    used_rows.remove(row)

        res = []
        used_rows = set()
        backtrack(0, [])
        return res

def graphColoring(self, v, edges, m):
        # code here
        adj = defaultdict(list)
        for u, b in edges:
            adj[u].append(b)
            adj[b].append(u)
        
        def is_safe(node,color,col):
            for nei in adj[node]:
                if col[nei] == color:
                    return False
            return True
        
        def backtrack(node,col):
            if node == v:
                return True
            
            for color in range(1,m+1):
                if is_safe(node,color,col):
                    col[node] = color
                
                    if backtrack(node+1,col):
                        return True
                
                col[node] = 0
            return False
        
        col = [0] * v
        return backtrack(0,col)

from typing import List

class Solution:
    def knightTour(self, n: int) -> List[List[int]]:
        def is_safe(x, y):
            return 0 <= x < n and 0 <= y < n and board[x][y] == -1

        def backtrack(x, y, step):
            if step == n * n:
                return True

            for i in range(8):
                nx, ny = x + dx[i], y + dy[i]
                if is_safe(nx, ny):
                    board[nx][ny] = step
                    if backtrack(nx, ny, step + 1):
                        return True
                    board[nx][ny] = -1  # backtrack

            return False

        board = [[-1 for _ in range(n)] for _ in range(n)]
        dx = [2, 1, -1, -2, -2, -1, 1, 2]
        dy = [1, 2, 2, 1, -1, -2, -2, -1]

        board[0][0] = 0  # Starting from top-left corner

        if backtrack(0, 0, 1):
            return board
        else:
            return [[-1]]

from typing import List

class Solution:
    def canPartitionKSubsets(self, arr: List[int], k: int) -> bool:
        total = sum(arr)
        if total % k != 0:
            return False
        target = total // k
        arr.sort(reverse=True)
        
        if arr[0] > target:
            return False  # optimization: early check
        
        buckets = [0] * k
        
        def backtrack(index):
            if index == len(arr):
                return all(bucket == target for bucket in buckets)
            
            for i in range(k):
                if buckets[i] + arr[index] <= target:
                    buckets[i] += arr[index]
                    if backtrack(index + 1):
                        return True
                    buckets[i] -= arr[index]
                    
                    if buckets[i] == 0:
                        break  # optimization: avoid symmetric cases
            
            return False  
        return backtrack(0)

def tugOfWar(arr):
    n = len(arr)
    total = sum(arr)

    min_diff = [float('inf')]
    final_subset = [[]]

    def backtrack(idx, count, curr_sum, selected):
        if count == n // 2:
            other_sum = total - curr_sum
            diff = abs(curr_sum - other_sum)
            if diff < min_diff[0]:
                min_diff[0] = diff
                final_subset[0] = selected[:]
            return

        if idx == n:
            return

        # Include arr[idx]
        selected.append(arr[idx])
        backtrack(idx + 1, count + 1, curr_sum + arr[idx], selected)
        selected.pop()

        # Exclude arr[idx]
        backtrack(idx + 1, count, curr_sum, selected)

    backtrack(0, 0, 0, [])

    subset1 = final_subset[0]
    subset2 = arr[:]
    for num in subset1:
        subset2.remove(num)

largest number with atmost Kswaps
class Solution:
    def findMaximumNum(self, s: str, k: int) -> str:
        max_num = [s]  # To keep track of the maximum number seen

        def backtrack(arr, k):
            if k == 0:
                return

            n = len(arr)
            for i in range(n):
                max_digit = max(arr[i:])
                if arr[i] != max_digit:
                    for j in range(n - 1, i, -1):
                        if arr[j] == max_digit:
                            arr[i], arr[j] = arr[j], arr[i]
                            new_s = ''.join(arr)
                            if new_s > max_num[0]:
                                max_num[0] = new_s
                            backtrack(arr, k - 1)
                            arr[i], arr[j] = arr[j], arr[i]  # Backtrack

        backtrack(list(s), k)
        return max_num[0]
    
