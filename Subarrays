Prefix Sum Concept:
Compute the running sum (curr_sum) of nums as you iterate.
A subarray from index i+1 to j has sum goal if prefix_sum[j] - prefix_sum[i] = goal.
Equivalently, for index j, find how many indices i have prefix_sum[i] = prefix_sum[j] - goal.

def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for num in nums[1:]:
        max_current = max(num, max_current + num)
        max_global = max(max_global, max_current)
    return max_global

def COUNTsubarraySum(nums, k):
    count = 0
    curr_sum = 0
    prefix_sums = {0: 1}  # Initialize with 0 sum having frequency 1
    
    for num in nums:
        curr_sum += num  # Update cumulative sum
        # If (curr_sum - k) exists, add its frequency to count
        if curr_sum - k in prefix_sums:
            count += prefix_sums[curr_sum - k]
        # Update frequency of current sum
        prefix_sums[curr_sum] = prefix_sums.get(curr_sum, 0) + 1
    
    return count
def longest_subarray_with_sum_k(arr, K):
    sum_index = {0: -1}
    curr_sum = 0
    max_length = 0
    
    for i in range(len(arr)):
        curr_sum += arr[i]
        if curr_sum - K in sum_index:
            max_length = max(max_length, i - sum_index[curr_sum - K])
        if curr_sum not in sum_index:
            sum_index[curr_sum] = i
            
    return max_length

def subarrays_div_by_k(nums, k):
    prefix_mod = {0: 1}
    current_mod = 0
    count = 0
    
    for num in nums:
        current_mod = (current_mod + num) % k
        if current_mod < 0:
            current_mod += k
        count += prefix_mod.get(current_mod, 0)
        prefix_mod[current_mod] = prefix_mod.get(current_mod, 0) + 1
    
    return count

Longest Substring Without Repeating Characters
def length_of_longest_substring(s):
    char_set = set()
    left = 0
    max_len = 0
    
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_len = max(max_len, right - left + 1)
    
    return max_len

def beautifulSubarrays(nums):
    prefix_xor = 0
    count = 0
    xor_freq = {0: 1}  # Initialize with XOR 0 having frequency 1
    
    for num in nums:
        prefix_xor ^= num  # Update cumulative XOR
        # If prefix_xor exists in map, add its frequency to count
        count += xor_freq.get(prefix_xor, 0)
        # Update frequency of current prefix_xor
        xor_freq[prefix_xor] = xor_freq.get(prefix_xor, 0) + 1
    
    return count

def minWindow(s: str, t: str) -> str:
    if not s or not t:
        return ""
    
    # Count frequency of characters in t
    t_count = {}
    for char in t:
        t_count[char] = t_count.get(char, 0) + 1
    
    # Initialize variables
    required = len(t_count)  # Number of unique chars in t
    formed = 0              # Number of chars with required frequency in window
    window_count = {}       # Frequency of chars in current window
    left = right = 0        # Window pointers
    min_len = float('inf')  # Length of minimum window
    min_window_start = 0    # Start index of minimum window
    
    while right < len(s):
        # Expand window: add character at right
        char = s[right]
        window_count[char] = window_count.get(char, 0) + 1
        
        # Check if this character contributes to forming a valid window
        if char in t_count and window_count[char] == t_count[char]:
            formed += 1
        
        # Contract window: try to minimize while still valid
        while left <= right and formed == required:
            char = s[left]
            # Update minimum window if current is smaller
            if right - left + 1 < min_len:
                min_len = right - left + 1
                min_window_start = left
            
            # Remove leftmost character
            window_count[char] -= 1
            if char in t_count and window_count[char] < t_count[char]:
                formed -= 1
            left += 1
        
        right += 1
    
    return "" if min_len == float('inf') else s[min_window_start:min_window_start + min_len]

def totalFruit(fruits):
    basket = defaultdict(int)  # Fix: Use defaultdict to avoid KeyError
    left = 0
    max_fruits = 0
    
    for right, fruit in enumerate(fruits):
        basket[fruit] += 1  # Now safe for new fruits
        
        while len(basket) > 2:
            left_fruit = fruits[left]
            basket[left_fruit] -= 1
            if basket[left_fruit] == 0:
                del basket[left_fruit]
            left += 1
        
        max_fruits = max(max_fruits, right - left + 1)
    
    return max_fruits

def numberOfSubstrings(self, s: str) -> int:
        freq = {}
        left = 0
        count = 0
        n = len(s)
        
        for right in range(n):
            # Add character at right to frequency map
            freq[s[right]] = freq.get(s[right], 0) + 1
            
            # Shrink window until it's no longer valid (less than 3 distinct characters)
            while len(freq) == 3:
                count += n - right  # All substrings from left to right or beyond are valid
                freq[s[left]] -= 1
                if freq[s[left]] == 0:
                    del freq[s[left]]
                left += 1
        
        return count

longest substrings with K uniques
def longestKUnique(s: str, k: int) -> int:
    freq = {}
    left = 0
    max_len = 0
    
    for right in range(len(s)):
        # Add character at right to frequency map
        freq[s[right]] = freq.get(s[right], 0) + 1
        
        # Shrink window if more than k distinct characters
        while len(freq) > k:
            freq[s[left]] -= 1
            if freq[s[left]] == 0:
                del freq[s[left]]
            left += 1
        
        # Update max_len if exactly k distinct characters
        if len(freq) == k:
            max_len = max(max_len, right - left + 1)
    
    return max_len if max_len >= k else -1

def subarraysWithKDistinct(nums, k):
    def atMostK(k):
        freq = {}
        left = 0
        count = 0
        
        for right in range(len(nums)):
            freq[nums[right]] = freq.get(nums[right], 0) + 1
            
            while len(freq) > k:
                freq[nums[left]] -= 1
                if freq[nums[left]] == 0:
                    del freq[nums[left]]
                left += 1
            
            count += right - left + 1
        
        return count
    
    return atMostK(k) - atMostK(k - 1)

def max_sum_subarray_size_k(nums, k):
    max_sum = window_sum = sum(nums[:k])  # Initialize with sum of first k elements
    
    for i in range(k, len(nums)):
        window_sum += nums[i] - nums[i - k]  # Slide window: add new element, remove oldest
        max_sum = max(max_sum, window_sum)   # Update max_sum if window_sum is larger
    
    return max_sum

def maxScore(cardPoints, k):
    n = len(cardPoints)
    total_sum = sum(cardPoints)
    window_size = n - k
    
    if window_size == 0:
        return total_sum
    
    # Initial window sum of size n-k
    window_sum = sum(cardPoints[:window_size])
    min_window_sum = window_sum
    
    # Slide the window
    for i in range(window_size, n):
        window_sum = window_sum + cardPoints[i] - cardPoints[i - window_size]
        min_window_sum = min(min_window_sum, window_sum)
    
    return total_sum - min_window_sum

from collections import deque
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        dq = deque()  # Store indices

        for i in range(n):
            # Remove indices out of the current window
            while dq and dq[0] < i - k + 1:
                dq.popleft()

            # Remove indices whose corresponding values are less than nums[i]
            while dq and nums[dq[-1]] < nums[i]:
                dq.pop()

            # Add current index
            dq.append(i)

            # Add to result when first window is complete
            if i >= k - 1:
                result.append(nums[dq[0]])

        return result

class Solution:
    def sumSubarrayMins(self, arr):
        MOD = 10**9 + 7
        n = len(arr)

        stack = []
        prev_less = [0] * n
        next_less = [0] * n

        # Previous less element
        for i in range(n):
            while stack and arr[stack[-1]] > arr[i]:
                stack.pop()
            prev_less[i] = i - stack[-1] if stack else i + 1
            stack.append(i)

        stack = []

        # Next less or equal element
        for i in range(n - 1, -1, -1):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            next_less[i] = stack[-1] - i if stack else n - i
            stack.append(i)

        total = 0
        for i in range(n):
            total += arr[i] * prev_less[i] * next_less[i]
            total %= MOD

        return total

def sumSubarrayMins(self, arr: List[int]) -> int:
    sum = 0  # Don't use `sum` as a variable name (Python has built-in `sum`)
    min_stack = []
    n = len(arr)

    for i in range(n + 1):  # Include n as a sentinel (force final processing)
        while min_stack and (i == n or arr[min_stack[-1]] >= arr[i]):
            j = min_stack.pop()
            left = min_stack[-1] if min_stack else -1
            sum += arr[j] * (j - left) * (i - j)
        if i < n:
            min_stack.append(i)

    return sum % (10**9 + 7)

class Solution:
    def subArrayRanges(self, nums: List[int]) -> int:
        def get_contribution(nums, is_min=True):
            n = len(nums)
            stack = []
            res = 0
            
            for i in range(n + 1):
                while stack and (i == n or
                    (nums[stack[-1]] > nums[i] if is_min else nums[stack[-1]] < nums[i])):
                    j = stack.pop()
                    left = stack[-1] if stack else -1
                    right = i
                    count = (j - left) * (right - j)
                    res += nums[j] * count
                if i < n:
                    stack.append(i)
            return res
        
        return get_contribution(nums, False) - get_contribution(nums, True)
