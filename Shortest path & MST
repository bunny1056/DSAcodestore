DAG (topo)
from typing import List
from collections import deque


class Solution:

    def shortestPath(self, V: int, E: int,
                     edges: List[List[int]]) -> List[int]:
        pass
        adj = [[] for _ in range(V)]
        visited = [False]*V
        result = [-1] * V
        
        for a,b,c in edges:
            adj[a].append((b,c))
            
        in_degree = [0] * V
        for u in range(V):
            for (v, w) in adj[u]:
                in_degree[v] += 1
        
        # Step 2: Initialize queue with nodes having in_degree 0
        queue = deque()
        for i in range(V):
            if in_degree[i] == 0:
                queue.append(i)
        
        # Step 3: Perform topological sort
        topo_order = []
        while queue:
            u = queue.popleft()
            topo_order.append(u)
            for (v, w) in adj[u]:
                in_degree[v] -= 1
                if in_degree[v] == 0:
                    queue.append(v)
        
        dist = [float ('inf')] * V
        dist[0] = 0
        
        for u in topo_order:
            if dist[u] != float('inf'):
                for v, w in adj[u]:
                    if dist[v] > dist[u] + w:
                        dist[v] = dist[u] + w
        for i in range(V):
            if dist[i] == float('inf'):
                dist[i] = -1
        return dist
Why topo?
Arrange nodes such that every edge u → v has u appearing before v in the order. This guarantees that when we process u, we’ve already computed the shortest path to u, so we can safely relax its outgoing edges.

Dijkstra's
import heapq
class Solution:
    # Function to find the shortest distance of all the vertices
    # from the source vertex src.
    def dijkstra(self, adj: List[List[Tuple[int, int]]], src: int) -> List[int]:
        # Your code here
        n = len(adj)
        distances = [float('inf')] * n
        distances[src] = 0
        visited = set()
        priority_queue = [(0 , src)]
        
        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)
            
            if current_node in visited:
                continue
            visited.add(current_node)
            
            for neighbour, weight in adj[current_node]:
                if neighbour in visited:
                    continue
                
                distance = current_distance + weight
                if distances[neighbour] > distance:
                    distances[neighbour] = distance
                    heapq.heappush(priority_queue, (distance, neighbour))
            
        return distances

binarymaze

import heapq
from math import inf

def shortestPathBinaryMatrix(grid):
    # Edge case: if starting cell is blocked
    if grid[0][0] == 1:
        return -1
    
    n = len(grid)
    # All 8 possible movement directions
    directions = [(1, 0), (0, 1), (-1, 0), (0, -1),
                 (-1, -1), (1, 1), (-1, 1), (1, -1)]
    
    # Priority queue: (path_length, x, y)
    heap = []
    heapq.heappush(heap, (1, 0, 0))
    
    # Distance matrix initialized with infinity
    dist = [[inf] * n for _ in range(n)]
    dist[0][0] = 1  # Starting cell
    
    while heap:
        path_len, x, y = heapq.heappop(heap)
        
        # Early termination if we reach the destination
        if x == n - 1 and y == n - 1:
            return path_len
        
        # Explore all 8 directions
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            
            # Check boundaries and if cell is walkable
            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0:
                new_dist = path_len + 1
                
                # If found a shorter path
                if new_dist < dist[nx][ny]:
                    dist[nx][ny] = new_dist
                    heapq.heappush(heap, (new_dist, nx, ny))
    
    # If destination wasn't reached
    return -1

# NOte : calculate path_len in q itself

min no of multiplication steps
Modulo Operation: Since each multiplication is followed by a modulo 100000 operation, the possible values of start are constrained between 0 and 99999. This means the state space is limited to 100,000 possible values, making the problem feasible for a BFS approach.
Breadth-First Search (BFS): BFS is suitable here because it explores all possible states level by level, ensuring that the first time we reach the end value, it is with the minimum number of steps.
Visited Tracking: To avoid reprocessing the same value multiple times and entering infinite loops, maintain a visited array or dictionary to keep track of the steps taken to reach each value.
from typing import List
 
class Solution:
    
    def minimumMultiplications(self, arr : List[int], start : int, end : int) -> int:
        # code here
        from collections import deque
        MOD = 100000
        if start == end:
            return 0
        
        visited = [-1] * MOD
        queue = deque()
        queue.append((start, 0))
        visited[start] = 0
        
        while queue:
            current, steps = queue.popleft()
            
            for num in arr:
                next_val = (current * num) % MOD
                if next_val == end:
                    return steps + 1
                if visited[next_val] == -1:
                    visited[next_val] = steps + 1
                    queue.append((next_val, steps + 1))
        
        return -1

MST (Prim's)
def minimum_spanning_tree(adj):
    n = len(adj)
    visited = [False] * n
    min_heap = []
    # Start with node 0
    heapq.heappush(min_heap, (0, 0))  # (weight, node)
    mst_weight = 0
    
    while min_heap:
        weight, node = heapq.heappop(min_heap)
        if visited[node]:
            continue
        visited[node] = True
        mst_weight += weight
        
        for neighbor, edge_weight in adj[node]:
            if not visited[neighbor]:
                heapq.heappush(min_heap, (edge_weight, neighbor))
    
    return mst_weight
union-find:
def find(par, x):
    if par[x] != x:
        par[x] = find(par, par[x])  # Path compression
    return par[x]

def unionSet(par, x, z):
    x_root = find(par, x)
    z_root = find(par, z)
    if x_root != z_root:
        par[x_root] = z_root
MST(kruskal's)
class DisjointSet:
    def __init__(self, size):
        self.parent = [i for i in range(size)]
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            self.parent[y_root] = x_root

def kruskal_mst(edges, num_vertices):
    edges.sort(key=lambda x: x[2])  # Sort edges by weight
    ds = DisjointSet(num_vertices)
    mst = []
    
    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):
            ds.union(u, v)
            mst.append((u, v, weight))
            if len(mst) == num_vertices - 1:
                break
    
    return mst



