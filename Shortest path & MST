DAG (topo)
from typing import List
from collections import deque


class Solution:

    def shortestPath(self, V: int, E: int,
                     edges: List[List[int]]) -> List[int]:
        pass
        adj = [[] for _ in range(V)]
        visited = [False]*V
        result = [-1] * V
        
        for a,b,c in edges:
            adj[a].append((b,c))
            
        in_degree = [0] * V
        for u in range(V):
            for (v, w) in adj[u]:
                in_degree[v] += 1
        
        # Step 2: Initialize queue with nodes having in_degree 0
        queue = deque()
        for i in range(V):
            if in_degree[i] == 0:
                queue.append(i)
        
        # Step 3: Perform topological sort
        topo_order = []
        while queue:
            u = queue.popleft()
            topo_order.append(u)
            for (v, w) in adj[u]:
                in_degree[v] -= 1
                if in_degree[v] == 0:
                    queue.append(v)
        
        dist = [float ('inf')] * V
        dist[0] = 0
        
        for u in topo_order:
            if dist[u] != float('inf'):
                for v, w in adj[u]:
                    if dist[v] > dist[u] + w:
                        dist[v] = dist[u] + w
        for i in range(V):
            if dist[i] == float('inf'):
                dist[i] = -1
        return dist
Why topo?
Arrange nodes such that every edge u → v has u appearing before v in the order. This guarantees that when we process u, we’ve already computed the shortest path to u, so we can safely relax its outgoing edges.

Dijkstra's
import heapq
class Solution:
    # Function to find the shortest distance of all the vertices
    # from the source vertex src.
    def dijkstra(self, adj: List[List[Tuple[int, int]]], src: int) -> List[int]:
        # Your code here
        n = len(adj)
        distances = [float('inf')] * n
        distances[src] = 0
        visited = set()
        priority_queue = [(0 , src)]
        
        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)
            
            if current_node in visited:
                continue
            visited.add(current_node)
            
            for neighbour, weight in adj[current_node]:
                
                distance = current_distance + weight
                if neighbor not in visited and distances[neighbour] > distance:
                    distances[neighbour] = distance
                    heapq.heappush(priority_queue, (distance, neighbour))
            
        return distances

binarymaze

import heapq
from math import inf

def shortestPathBinaryMatrix(grid):
    # Edge case: if starting cell is blocked
    if grid[0][0] == 1:
        return -1
    
    n = len(grid)
    # All 8 possible movement directions
    directions = [(1, 0), (0, 1), (-1, 0), (0, -1),
                 (-1, -1), (1, 1), (-1, 1), (1, -1)]
    
    # Priority queue: (path_length, x, y)
    heap = []
    heapq.heappush(heap, (1, 0, 0))
    
    # Distance matrix initialized with infinity
    dist = [[inf] * n for _ in range(n)]
    dist[0][0] = 1  # Starting cell
    
    while heap:
        path_len, x, y = heapq.heappop(heap)
        
        # Early termination if we reach the destination
        if x == n - 1 and y == n - 1:
            return path_len
        
        # Explore all 8 directions
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            
            # Check boundaries and if cell is walkable
            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0:
                new_dist = path_len + 1
                
                # If found a shorter path
                if new_dist < dist[nx][ny]:
                    dist[nx][ny] = new_dist
                    heapq.heappush(heap, (new_dist, nx, ny))
    
    # If destination wasn't reached
    return -1

# NOte : calculate path_len in q itself

min no of multiplication steps
Modulo Operation: Since each multiplication is followed by a modulo 100000 operation, the possible values of start are constrained between 0 and 99999. This means the state space is limited to 100,000 possible values, making the problem feasible for a BFS approach.
Breadth-First Search (BFS): BFS is suitable here because it explores all possible states level by level, ensuring that the first time we reach the end value, it is with the minimum number of steps.
Visited Tracking: To avoid reprocessing the same value multiple times and entering infinite loops, maintain a visited array or dictionary to keep track of the steps taken to reach each value.
from typing import List
 
class Solution:
    
    def minimumMultiplications(self, arr : List[int], start : int, end : int) -> int:
        # code here
        from collections import deque
        MOD = 100000
        if start == end:
            return 0
        
        visited = [-1] * MOD
        queue = deque()
        queue.append((start, 0))
        visited[start] = 0
        
        while queue:
            current, steps = queue.popleft()
            
            for num in arr:
                next_val = (current * num) % MOD
                if next_val == end:
                    return steps + 1
                if visited[next_val] == -1:
                    visited[next_val] = steps + 1
                    queue.append((next_val, steps + 1))
        
        return -1

cheapest flight within K stops
import heapq
from collections import defaultdict

def findCheapestPrice(n, flights, src, dst, k):
    flight = defaultdict(list)
    for f, t, p in flights:
        flight[f].append((t, p))

    # dist[node][stops] = min cost to reach node with stops used
    dist = defaultdict(lambda: float('inf'))
    dist[(src, 0)] = 0

    # Heap elements: (cost, node, stops)
    minhp = [(0, src, 0)]

    while minhp:
        cost, node, stops = heapq.heappop(minhp)

        if node == dst:
            return cost

        if stops > k:
            continue

        for nei, price in flight[node]:
            new_cost = cost + price
            # Only push if new_cost is better for this node with stops+1
            if dist[(nei, stops + 1)] > new_cost:
                dist[(nei, stops + 1)] = new_cost
                heapq.heappush(minhp, (new_cost, nei, stops + 1))

    return -1

def countPaths(self, n: int, roads: List[List[int]]) -> int:
        adj = [[] for _ in range(n)]
        for a,b,c in roads:
            adj[a].append((b,c))
            adj[b].append((a,c))
        pathcounts = [0] * n
        pathcounts[0] = 1
        pq = []
        heapq.heappush(pq,(0,0))
        distances = [float('inf')]*n
        distances[0] = 0
        MOD = 10**9 + 7


        while pq:
            current_distance, current_node = heapq.heappop(pq)

            if current_distance > distances[current_node]:
                continue
            for neighbour, next_distance in adj[current_node]:
                distance = current_distance + next_distance
                if distance < distances[neighbour]:
                    distances[neighbour] = distance
                    pathcounts[neighbour] = pathcounts[current_node]
                    heapq.heappush(pq,(distance, neighbour))
                elif distance == distances[neighbour]:
                    pathcounts[neighbour] = (pathcounts[neighbour] + pathcounts[current_node]) % MOD              
                   
        return pathcounts[n - 1] if distances[n - 1] != float('inf') else 0

Bellman Ford
def bellman_ford(edges, V, src):
    # edges = list of tuples (u, v, w)
    dist = [float('inf')] * V
    dist[src] = 0

    # Relax edges V-1 times
    for _ in range(V - 1):
        for u, v, w in edges:
            if dist[u] != float('inf') and dist[u] + w < dist[v]:
                dist[v] = dist[u] + w

    # Check for negative weight cycle
    for u, v, w in edges:
        if dist[u] != float('inf') and dist[u] + w < dist[v]:
            print("Graph contains negative weight cycle")
            return None

    return dist

def floyd_warshall(graph):
    """
    graph: 2D list (adjacency matrix)
    graph[i][j] = weight of edge i->j or float('inf') if no direct edge
    """
    V = len(graph)
    dist = [row[:] for row in graph]  # deep copy of graph matrix

    for k in range(V):
        for i in range(V):
            for j in range(V):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    # Optional: Detect negative cycle (if dist[i][i] < 0 for any i)
    for i in range(V):
        if dist[i][i] < 0:
            print("Negative cycle detected")
            return None

    return dist

def findCity(n, edges, distanceThreshold):
    INF = float('inf')
    dist = [[INF] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    # Fill initial distances from edges (bidirectional)
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    
    # Floyd-Warshall All-Pairs Shortest Paths
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    result = -1
    min_reachable = n + 1  # More than max cities possible
    
    for city in range(n):
        reachable_count = 0
        for other in range(n):
            if dist[city][other] <= distanceThreshold:
                reachable_count += 1
        
        # Exclude the city itself? Usually count includes self (distance 0), but 
        # problem can be interpreted both ways. Here including self is fine.
        # To exclude, do: if other != city and dist[city][other] <= distanceThreshold
        
        if reachable_count <= min_reachable:
            # If tie on reachable_count, pick city with greatest index
            min_reachable = reachable_count
            result = city
    
    return result

MST (Prim's)
import heapq
from collections import defaultdict

def prim_mst(n, edges):
    # Build adjacency list: node -> [(neighbor, weight), ...]
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    
    visited = set()
    min_heap = [(0, 0)]  # (weight, node), start from node 0
    total_weight = 0
    
    while min_heap and len(visited) < n:
        weight, node = heapq.heappop(min_heap)
        if node in visited:
            continue
        visited.add(node)
        total_weight += weight
        
        for neighbor, w in graph[node]:
            if neighbor not in visited:
                heapq.heappush(min_heap, (w, neighbor))
    
    # If all nodes visited, return total MST weight; else, graph not connected
    return total_weight if len(visited) == n else -1

union-find:
def find(par, x):
    if par[x] != x:
        par[x] = find(par, par[x])  # Path compression
    return par[x]

def unionSet(par, x, z):
    x_root = find(par, x)
    z_root = find(par, z)
    if x_root != z_root:
        par[x_root] = z_root
MST(kruskal's)
class DisjointSet:
    def __init__(self, size):
        self.parent = [i for i in range(size)]
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            self.parent[y_root] = x_root

def kruskal_mst(edges, num_vertices):
    edges.sort(key=lambda x: x[2])  # Sort edges by weight
    ds = DisjointSet(num_vertices)
    mst = []
    
    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):
            ds.union(u, v)
            mst.append((u, v, weight))
            if len(mst) == num_vertices - 1:
                break
    
    return mst

Tarzan
class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        graph = [[] for _ in range(n)]
        for u, v in connections:
            graph[u].append(v)
            graph[v].append(u)
        
        res = []
        disc = [-1] * n  # discovery times
        low = [-1] * n
        time = 0

        def dfs(u, parent):
            nonlocal time
            disc[u] = low[u] = time
            time += 1

            for v in graph[u]:
                if v == parent:
                    continue
                if disc[v] == -1:  # not visited
                    dfs(v, u)
                    low[u] = min(low[u], low[v])
                    if low[v] > disc[u]:  # critical connection found
                        res.append([u, v])
                else:
                    low[u] = min(low[u], disc[v])

        dfs(0, -1)
        return res



