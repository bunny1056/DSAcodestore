def RLroottraversal(t):
  if t != None:
    traversal(t.right)
    traversal(t.left)
    print(t.value, end = '')
traversal(root)

Pre-order
def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        
        def helper(root):
            if root == None:
                return 
            result.append(root.val)

            helper(root.left)
            helper(root.right)
        helper(root)

        return result

Level order traversal
def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []

        Q = deque()
        Q.append(root)
count_nodes
def countNodes(self, root):
        if not root:
            return 0
        r = self.getD(root.left, True) + 1
        l = self.getD(root.right, False) + 1
        if r == l:
            return (1 << r) - 1
        return 1 + self.countNodes(root.left) + self.countNodes(root.right)

    def getD(self, node, left):
        d = 0
        while node:
            node = node.left if left else node.right
            d += 1
        return d     
        
        result = []

        while Q:
            level_size = len(Q)
            current_level = []

            for _ in range(level_size):
                node = Q.popleft()
                current_level.append(node.val)
                if node.left:
                    Q.append(node.left)
                if node.right:
                    Q.append(node.right)
            result.append(current_level)
        return result
using stack
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        stack, result = [root], []
        while stack:
            node = stack.pop()
            result.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return result

height
def maxDepth(self, root: Optional[TreeNode]) -> int:
        if root is None:
            return 0
        left_height = self.maxDepth(root.left)
        right_height = self.maxDepth(root.right)
        return 1 + max(left_height, right_height)

balanced BT
def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def check(node):
            if not node:
                return 0
            left_height = check(node.left)
            if left_height == -1:
                return -1
            right_height = check(node.right)
            if right_height == -1:
                return -1
            if abs(left_height - right_height) > 1:
                return -1
            return 1 + max(left_height,right_height)
        return check(root) != -1

def maxPathSum(self, root: Optional[TreeNode]) -> int:
        ans = float('-inf')
        def cal(node):
            nonlocal ans
            if not node:
                return 0
            left_sum = max(cal(node.left),0)
            right_sum = max(cal(node.right),0)

            price_newpath = node.val + left_sum + right_sum
            ans = max(ans,price_newpath)
                
            return node.val + max(left_sum,right_sum)
        cal(root)
        return ans

whether two trees are identical
def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if (p and not q) or (not p and q):
            return False
        if p.val != q.val:
            return False
        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)

zigzag traversal
 if not flag:
                current_level = current_level[::-1]
            result.append(current_level)
            flag = not flag

boundary traversal
def boundaryTraversal(self, root):
    def is_leaf(node):
        return node.left is None and node.right is None

    def left_boundary(node, boundary):
        curr = node.left
        while curr:
            if not is_leaf(curr):
                boundary.append(curr.data)
            if curr.left:
                curr = curr.left
            else:
                curr = curr.right

    def right_boundary(node, boundary):
        curr = node.right
        st = []
        while curr:
            if not is_leaf(curr):
                st.append(curr.data)
            if curr.right:
                curr = curr.right
            else:
                curr = curr.left
        while st:
            boundary.append(st.pop())

    def add_leaves(node, boundary):
        if is_leaf(node):
            boundary.append(node.data)
        else:
            if node.left:
                add_leaves(node.left, boundary)
            if node.right:
                add_leaves(node.right, boundary)

    if not root:
        return []

    boundary = []
    if not is_leaf(root):  # Fix here
        boundary.append(root.data)

    left_boundary(root, boundary)
    add_leaves(root, boundary)
    right_boundary(root, boundary)

    return boundary

vertical traversal
from collections import defaultdict, deque

def verticalTraversal(root):
    node_list = []

    # BFS traversal
    queue = deque([(root, 0, 0)])  # (node, row, col)

    while queue:
        node, row, col = queue.popleft()
        if node:
            node_list.append((col, row, node.val))
            queue.append((node.left, row + 1, col - 1))
            queue.append((node.right, row + 1, col + 1))

    # Sort by col, then row, then value
    node_list.sort()

    # Grouping by column
    res = defaultdict(list)
    for col, row, value in node_list:
        res[col].append(value)

    # Extract the result columns in order
    return [res[x] for x in sorted(res)]

views of trees
Topdef topView(root):
    if not root:
        return []

    queue = deque([(root, 0)])  # node, column
    top_nodes = {}

    while queue:
        node, col = queue.popleft()
        if col not in top_nodes:
            top_nodes[col] = node.val
        if node.left:
            queue.append((node.left, col - 1))
        if node.right:
            queue.append((node.right, col + 1))

    return [top_nodes[col] for col in sorted(top_nodes)]

Bottom
def bottomView(root):
    if not root:
        return []

    queue = deque([(root, 0)])
    bottom_nodes = {}

    while queue:
        node, col = queue.popleft()
        bottom_nodes[col] = node.val  # overwrite
        if node.left:
            queue.append((node.left, col - 1))
        if node.right:
            queue.append((node.right, col + 1))

    return [bottom_nodes[col] for col in sorted(bottom_nodes)]

left or right
def leftView(root):
    if not root:
        return []

    result = []
    queue = deque([root])

    while queue:
        level_size = len(queue)
        for i in range(level_size):
            node = queue.popleft()
            if i == 0:  (((( if i == level_size - 1 #for right_view))))
                result.append(node.val)  # first node at this level
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

    return result

CLSSIC backtracking targetSum Qn
def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        result = []
        def dfs(node,current_path,current_sum):
            if not node:
                return
            current_path.append(node.val)
            current_sum += node.val
            if not node.left and not node.right:
                if current_sum == targetSum:
                    result.append(list(current_path))
            else:
                dfs(node.left,current_path,current_sum)
                dfs(node.right,current_path,current_sum)
            current_path.pop() #backtrack
        dfs(root,[],0)
        return result

lowest common ancestor
### Hint for Finding the Lowest Common Ancestor (LCA) in a Binary Tree

To find the LCA of two nodes `p` and `q` in a binary tree, consider the following approach:

1. **Base Case**: If the current node is `None` or matches either `p` or `q`, return the current node. This is because:
   - If the current node is `None`, it can't be an ancestor.
   - If the current node is `p` or `q`, it might be the LCA (especially if the other node is in its subtree).

2. **Recursive Search**: Recursively search for `p` and `q` in the left and right subtrees of the current node.
   - If both subtrees return non-`None` results, the current node is the LCA because `p` and `q` are found in different subtrees.
   - If only one subtree returns a non-`None` result, that result is the LCA (the other node is in its subtree).
   - If both subtrees return `None`, neither `p` nor `q` exists in the current subtree.

3. **Intuition**: The LCA is the deepest node that has `p` and `q` in its left and right subtrees (or is one of them). The recursion helps propagate this information upwards.

### Key Insight
- The LCA is the first node where `p` and `q` are found in different subtrees (or one is the node itself).
- The recursion naturally explores the tree from the bottom up, making it easy to identify the deepest common ancestor. 

This approach efficiently narrows down the LCA by leveraging the properties of recursion and tree traversal.

def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root:
            return None
        if p==root or q==root:
            return root
        left=self.lowestCommonAncestor(root.left,p,q)
        right=self.lowestCommonAncestor(root.right,p,q)
        if left and right:
            return root
        return left or right

nodes existence
def node_exists(root, node):
            if not root:
                return False
            if root == node:
                return True
            return node_exists(root.left, node) or node_exists(root.right, node)
        
        # Check if both p and q exist in the tree.
        if not node_exists(root, p) or not node_exists(root, q):
            return None

if nodes = 3
r == root and left!= right

basic sense 
children sum property
def isSumProperty(self, root):
    # Base case: empty node or leaf node
    if root is None or (root.left is None and root.right is None):
        return 1
    
    left_data = 0 if root.left is None else root.left.data
    right_data = 0 if root.right is None else root.right.data
    
    # Check current node's property
    if root.data != left_data + right_data:
        return 0
    
    # Recursively check left and right subtrees
    left_check = self.isSumProperty(root.left) if root.left else 1
    right_check = self.isSumProperty(root.right) if root.right else 1
    
    return left_check and right_check
or
def isSumProperty(self, root):
    if not root:
        return 1
    if not root.left and not root.right:
        return 1
    
    total = 0
    if root.left:
        total += root.left.data
    if root.right:
        total += root.right.data
    
    return int(root.data == total and 
               self.isSumProperty(root.left) and 
               self.isSumProperty(root.right))
what i did (foolish)
if not root.left and not root.right:
            return 1
        if root.left and not root.right:
            if root.data == root.left.data:
                return 1
            else:
                return 0
        if not root.left and root.right:
            if root.data == root.right.data:
                return 1
            else:
                return 0
        if root.data == root.left.data + root.right.data:
            return 1
        return self.isSumProperty(root.left) and self.isSumProperty(root.right)

upward traversing(building parent) and distance in edges
from collections import deque

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        # Build parent pointers
        parent = {}
        def build_parent(node, par):
            if node:
                parent[node] = par
                build_parent(node.left, node)
                build_parent(node.right, node)
        build_parent(root, None)
        
        # BFS queue: (node, distance)
        queue = deque()
        queue.append((target, 0))
        visited = set()
        visited.add(target)
        result = []
        
        while queue:
            node, distance = queue.popleft()
            
            if distance == k:
                result.append(node.val)
                continue  # No need to process further for this node
            
            # Visit left child
            if node.left and node.left not in visited:
                visited.add(node.left)
                queue.append((node.left, distance + 1))
            
            # Visit right child
            if node.right and node.right not in visited:
                visited.add(node.right)
                queue.append((node.right, distance + 1))
            
            # Visit parent
            if parent[node] and parent[node] not in visited:
                visited.add(parent[node])
                queue.append((parent[node], distance + 1))
        
        return result

def start_node(root,start):
            if not root:
                return None
            if root.val == start:
                return root
            
            left = start_node(root.left,start)
            if left:
                return left
            return start_node(root.right,start)
        target = start_node(root,start)

build binary tree from preorder and in_order
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        # Create a hashmap to store value -> index for quick lookup in inorder
        inorder_index_map = {value: idx for idx, value in enumerate(inorder)}
        
        # Pointer to keep track of root in preorder list
        self.preorder_index = 0 

        def helper(left: int, right: int) -> Optional[TreeNode]:
            # If there are no elements to construct the subtree
            if left > right:
                return None

            # Select preorder_index element as the root and increment it
            root_val = preorder[self.preorder_index]
            self.preorder_index += 1
            root = TreeNode(root_val)

            # Build left and right subtree
            # excluding inorder_index_map[root_val] element because it's the root
            root.left = helper(left, inorder_index_map[root_val] - 1)
            root.right = helper(inorder_index_map[root_val] + 1, right)

            return root

        return helper(0, len(inorder) - 1)
for postorder start post_order index = -1 and construct root.right first

serialize and deserialize (important)
from collections import deque
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        queue = deque([root])
        serialized = []
        while queue:
            node = queue.popleft()
            if node:
                serialized.append(str(node.val))
                queue.append(node.left)
                queue.append(node.right)
            else:
                serialized.append("null")
        # Remove trailing nulls to minimize the string
        while serialized and serialized[-1] == "null":
            serialized.pop()
        return ",".join(serialized)
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        values = data.split(',')
        root = TreeNode(int(values[0]))
        queue = deque([root])
        index = 1
        while queue and index < len(values):
            node = queue.popleft()
            if index < len(values) and values[index] != "null":
                node.left = TreeNode(int(values[index]))
                queue.append(node.left)
            index += 1
            if index < len(values) and values[index] != "null":
                node.right = TreeNode(int(values[index]))
                queue.append(node.right)
            index += 1
        return root

