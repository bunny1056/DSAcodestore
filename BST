The key observation here is that in a BST, an in-order traversal yields the nodes in ascending order.
def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
    def helper(node, val):
        if not node:
            return None  # Base case: value not found
        if node.val == val:
            return node  # Base case: value found
        if val < node.val:
            return helper(node.left, val)  # Propagate result from left subtree
        else:
            return helper(node.right, val)  # Propagate result from right subtree
    
    return helper(root, val)  # Initiate search and return result

    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        def inorder(node):
            if not node:
                return []
            return inorder(node.left) + [node.val] + inorder(node.right)
        
        values = inorder(root)
        min_diff = float('inf')
        for i in range(1, len(values)):
            diff = values[i] - values[i-1]
            if diff < min_diff:
                min_diff = diff
        return min_diff

Floor/Ceil in BST
        key = x
        floor = -1
        while root:
            if root.data == key:
                return root.data
            elif root.data < key:
                floor = root.data  # Update floor
                root = root.right  # Search right for a larger floor
            else:
                root = root.left  # Search left for a smaller value
        return floor


    def findMin(self, node):
        current = node
        while current.left:
            current = current.left
        return current
    
    def findMax(self, node):
        current = node
        while current.right:
            current = current.right
        return current

def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
    count = 0
    def dfs(node: Optional[TreeNode]) -> int:
        if not node:
            return None

        value = dfs(node.left)
        if value is not None:
            return value

        nonlocal count
        count += 1
        if count == k:
            return node.val

        value = dfs(node.right)
        if value is not None:
            return value

        return None
    return dfs(root)

valid BST

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        stack = []
        prev = None
        
        while stack or root:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            if prev is not None and root.val <= prev.val:
                return False
            prev = root
            root = root.right
        return True

def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while root:
            if p.val > root.val and q.val > root.val:
                root = root.right
            elif p.val < root.val and q.val < root.val:
                root = root.left
            else:
                return root
BSTfrompreorder
def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        if not preorder:
            return None        
        root = TreeNode(preorder[0])
        i = 1
        while i < len(preorder) and preorder[i] < root.val:
            i += 1    
        root.left = self.bstFromPreorder(preorder[1:i])
        root.right = self.bstFromPreorder(preorder[i:])
        return root

def search(root, val):
    while root:
        if root.val == val:
            return root
        elif val < root.val:
            root = root.left
        else:
            root = root.right
    return None  # Not found

def insert(root, val):
    if not root:
        return TreeNode(val)
    if val < root.val:
        root.left = insert(root.left, val)
    else:
        root.right = insert(root.right, val)
    return root

def delete(root, val):
    if not root:
        return root
    if val < root.val:
        root.left = delete(root.left, val)
    elif val > root.val:
        root.right = delete(root.right, val)
    else:
        if not root.left:
            return root.right
        elif not root.right:
            return root.left
        # Node with two children: Get in-order successor
        temp = find_min(root.right)
        root.val = temp.val
        root.right = delete(root.right, temp.val)
    return root

def successor(root, p):
    succ = None
    while root:
        if p.val < root.val:
            succ = root
            root = root.left
        else:
            root = root.right
    return succ.val if succ else -1

def predecessor(root, p):
    pred = None
    while root:
        if p.val > root.val:
            pred = root
            root = root.right
        else:
            root = root.left
    return pred

TwoSum in BST
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        seen = set()
        stack = []
        current = root
        
        while stack or current:
            while current:
                stack.append(current)
                current = current.left
            current = stack.pop()
            complement = k - current.val
            if complement in seen:
                return True
            seen.add(current.val)
            current = current.right
        return False

def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        
        stack = []
        current = root
        prev = None
        first = None
        second = None
        
        while stack or current:
            while current:
                stack.append(current)
                current = current.left
            current = stack.pop()
            
            if prev and prev.val > current.val:
                if not first:
                    first = prev
                second = current      
            prev = current
            current = current.right
        if first and second:
            first.val, second.val = second.val, first.val
        return 
        
class Solution:
    def largestBst(self, root):
        def helper(node):
            if not node:
                return (True, 0, float('inf'), float('-inf'))  # is_bst, size, min, max
            
            left_is_bst, left_size, left_min, left_max = helper(node.left)
            right_is_bst, right_size, right_min, right_max = helper(node.right)
            
            if left_is_bst and right_is_bst and left_max < node.data and right_min > node.data:
                size = left_size + right_size + 1
                current_min = min(left_min, node.data)
                current_max = max(right_max, node.data)
                return (True, size, current_min, current_max)
            else:
                return (False, max(left_size, right_size), 0, 0)
        
        is_bst, size, _, _ = helper(root)
        return size

Merge 2 BSTs
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.stack = []
        self._leftmost_inorder(root)

    def _leftmost_inorder(self, node: Optional[TreeNode]):
        while node:
            self.stack.append(node)
            node = node.left

    def next(self) -> int:
        # Top of the stack is the next smallest element
        top_node = self.stack.pop()

        # If there is a right child, process its leftmost path
        if top_node.right:
            self._leftmost_inorder(top_node.right)

        return top_node.val

    def hasNext(self) -> bool:
        return len(self.stack) > 0
