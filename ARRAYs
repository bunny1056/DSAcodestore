Second Largest
def second_largest(arr):
    first = second = float('-inf')
    for num in arr:
        if num > first:
            second = first
            first = num
        elif num > second and num != first:
            second = num
    return second if second != float('-inf') else -1

sorted and rotated
def check(nums):
    n = len(nums)
    if n <= 1:
        return True  # An array with 0 or 1 element is trivially rotated sorted
    
    pivot = 0
    # Find the pivot where the order decreases
    for i in range(n - 1):
        if nums[i] > nums[i + 1]:
            pivot = i + 1
            break
    
    # Check if the array is already fully sorted (no pivot found)
    if pivot == 0:
        return True
    
    # Check if the remaining elements after pivot are sorted and the last element is <= first element
    is_sorted = True
    for i in range(pivot, n - 1):
        if nums[i] > nums[i + 1]:
            is_sorted = False
            break
    
    return is_sorted and (nums[-1] <= nums[0])

Next permutation
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        
        # Step 1: Find the first index 'pivot' from the right such that nums[i - 1] < nums[i]
        pivot = 0
        for i in range(len(nums) - 1, 0, -1):
            if nums[i - 1] < nums[i]:
                pivot = i
                break

        # Step 2: If no pivot found, the list is in descending order â€” reverse to lowest order
        if pivot == 0:
            nums.reverse()
            return

        # Step 3: Find the smallest element greater than nums[pivot - 1] from the right
        swap = len(nums) - 1
        while nums[pivot - 1] >= nums[swap]:
            swap -= 1

        # Step 4: Swap nums[pivot - 1] with nums[swap]
        nums[pivot - 1], nums[swap] = nums[swap], nums[pivot - 1]

        # Step 5: Reverse the suffix starting at pivot
        nums[pivot:] = reversed(nums[pivot:])

Left rotate
def rotate(nums, k):
    k %= len(nums)
    nums[:] = nums[::-1]
    nums[:k] = reversed(nums[:k])
    nums[k:] = reversed(nums[k:])

missing number
def missingNumber(self, nums: List[int]) -> int:
        n = len(nums)
        expected_sum = n * (n + 1) // 2
        actual_sum = sum(nums)
        return expected_sum - actual_sum

def removeDuplicates(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 
        k = 1
        for i in range(n-1):
            if nums[i+1] != nums[i]:
                nums[k] = nums[i + 1]
                k += 1
        return k

def findDuplicateAndMissing(arr):
    n = len(arr)
    
    sum_actual = sum(arr)
    sum_sq_actual = sum(x * x for x in arr)
    
    sum_expected = n * (n + 1) // 2
    sum_sq_expected = n * (n + 1) * (2 * n + 1) // 6

    S1 = sum_actual - sum_expected          # A - B
    S2 = sum_sq_actual - sum_sq_expected    # A^2 - B^2 = (A - B)(A + B)

    # A + B = S2 / S1
    A_plus_B = S2 // S1
    A = (S1 + A_plus_B) // 2
    B = A - S1

    return [A, B]

sort colors/ dutch national flag
def sortColors(nums):
    low, mid, high = 0, 0, len(nums) - 1

    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:  # nums[mid] == 2
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1

Boyer-Moore Voting Algorithm
def majorityElement(nums):
    count = 0
    candidate = None
    for num in nums:
        if count == 0:
            candidate = num
        count += (1 if num == candidate else -1)
    return candidate

from collections import Counter
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        count = Counter(nums)
        n = len(nums)
        res = []
        for num, freq in count.items():
            if freq > n/3:
                res.append(num)
        return res

Rearrange
def rearrangeArray(self, nums: List[int]) -> List[int]:
        p, q = 0, 1
        n = len(nums)
        result = [0]*n

        for num in nums:
            if num > 0:
                result[p] = num
                p += 2
            else:
                result[q] = num
                q += 2
        return result

Leaders
def find_leaders(arr):
    n = len(arr)
    max_from_right = arr[-1]
    leaders = [max_from_right]
    
    for i in range(n - 2, -1, -1):
        if arr[i] >= max_from_right:
            max_from_right = arr[i]
            leaders.append(max_from_right)
    
    return leaders[::-1]  # Reverse to maintain the original order

Max Consecutive Ones I
def findMaxConsecutiveOnes(nums):
    max_count = 0
    curr_count = 0
    for num in nums:
        if num == 1:
            curr_count += 1
            max_count = max(max_count, curr_count)
        else:
            curr_count = 0
    return max_count

Max Consecutive Ones II,III
def longestOnes(nums, k):
    left = 0
    zero_count = 0
    max_len = 0
    
    for right in range(len(nums)):
        if nums[right] == 0:
            zero_count += 1
        while zero_count > k:
            if nums[left] == 0:
                zero_count -= 1
            left += 1
        max_len = max(max_len, right - left + 1)
    
    return max_len

Longest consecutive sequence
def longestConsecutive(nums):
    if not nums:
        return 0
    
    num_set = set(nums)  # Convert array to set for O(1) lookups
    max_length = 0
    
    for num in num_set:
        # Check if num is the start of a sequence
        if num - 1 not in num_set:
            current_num = num
            current_length = 1
            
            # Count consecutive numbers
            while current_num + 1 in num_set:
                current_num += 1
                current_length += 1
            
            max_length = max(max_length, current_length)
    
    return max_length

def setZeroes(self, matrix: List[List[int]]) -> None:
    """
    Do not return anything, modify matrix in-place instead.
    """
    m, n = len(matrix), len(matrix[0])
    first_row_has_zero = any(matrix[0][j] == 0 for j in range(n))
    first_col_has_zero = any(matrix[i][0] == 0 for i in range(m))

    # Use first row and column to mark zeros
    for i in range(1, m):
        for j in range(1, n):
            if matrix[i][j] == 0:
                matrix[i][0] = 0
                matrix[0][j] = 0

    # Zero out cells based on marks in first row and column
    for i in range(1, m):
        for j in range(1, n):
            if matrix[i][0] == 0 or matrix[0][j] == 0:
                matrix[i][j] = 0

    # Zero out first row if needed
    if first_row_has_zero:
        for j in range(n):
            matrix[0][j] = 0

    # Zero out first column if needed
    if first_col_has_zero:
        for i in range(m):
            matrix[i][0] = 0

90 = transpose + reverse row
180 = reverse row + reverse column
270 = transpose + reverse col

def rotate(matrix):
    matrix[:] = [list(row) for row in zip(*matrix[::-1])]
def rotate(self, m: List[List[int]]) -> None:
        for i in range(len(m)):
            for j in range(i+1,len(m)):
                a=m[i][j]
                m[i][j]=m[j][i]
                m[j][i]=a
        for i in range(len(m)):
            for j in range(len(m)//2):
                a=m[i][j]
                m[i][j]=m[i][len(m)-1-j]
                m[i][len(m)-1-j]=a

spiral matrix
def spiralOrder(matrix):
    if not matrix:
        return []

    res = []
    top, bottom = 0, len(matrix) - 1
    left, right = 0, len(matrix[0]) - 1

    while top <= bottom and left <= right:
        # Traverse from left to right
        for col in range(left, right + 1):
            res.append(matrix[top][col])
        top += 1

        # Traverse from top to bottom
        for row in range(top, bottom + 1):
            res.append(matrix[row][right])
        right -= 1

        if top <= bottom:
            # Traverse from right to left
            for col in range(right, left - 1, -1):
                res.append(matrix[bottom][col])
            bottom -= 1

        if left <= right:
            # Traverse from bottom to top
            for row in range(bottom, top - 1, -1):
                res.append(matrix[row][left])
            left += 1

    return res

def reversePairs(nums):
    def merge_sort(start, end):
        if start >= end:
            return 0
        mid = (start + end) // 2
        count = merge_sort(start, mid) + merge_sort(mid + 1, end)

        # Count reverse pairs
        j = mid + 1
        for i in range(start, mid + 1):
            while j <= end and nums[i] > 2 * nums[j]:
                j += 1
            count += j - (mid + 1)

        # Merge step
        temp = []
        left, right = start, mid + 1
        while left <= mid and right <= end:
            if nums[left] <= nums[right]:
                temp.append(nums[left])
                left += 1
            else:
                temp.append(nums[right])
                right += 1
        while left <= mid:
            temp.append(nums[left])
            left += 1
        while right <= end:
            temp.append(nums[right])
            right += 1

        # Copy sorted part back
    return merge_sort(0, len(nums) - 1)


from collections import Counter

def rearrange_blocks(blocks):
    # Step 1: Flatten the list and count number of houses per block
    flat_list = []
    block_sizes = []

    for block in blocks:
        flat_list.extend(block)
        block_sizes.append(len(block))

    # Step 2: Sort the flat list
    flat_list.sort()
    
    # Step 3: Distribute sorted values into blocks with unique and sorted values
    new_blocks = [[] for _ in block_sizes]
    used = Counter()

    i = 0  # Index for values in flat_list
    for round in range(max(block_sizes)):  # Go round-robin
        for b in range(len(block_sizes)):
            if len(new_blocks[b]) < block_sizes[b]:
                # Pick the next unused unique value
                while i < len(flat_list) and flat_list[i] in new_blocks[b]:
                    i += 1
                if i < len(flat_list):
                    new_blocks[b].append(flat_list[i])
                    i += 1

    # Sort each block (should be sorted already, but just in case)
    for block in new_blocks:
        block.sort()

    return new_blocks

def maxIndexDiff(arr):
    n = len(arr)
    rMax = [0] * n
    rMax[-1] = arr[-1]

    for i in range(n - 2, -1, -1):
        rMax[i] = max(arr[i], rMax[i + 1])

    i = j = ans = 0

    while i < n and j < n:
        if arr[i] <= rMax[j]:
            ans = max(ans, j - i)
            j += 1
        else:
            i += 1

    return ans

Trap_water
def trap(height):
    if not height:
        return 0
    
    n = len(height)
    left_max = [0] * n
    right_max = [0] * n
    
    # Compute the left maximum for each position
    left_max[0] = height[0]
    for i in range(1, n):
        left_max[i] = max(left_max[i-1], height[i])
    
    # Compute the right maximum for each position
    right_max[n-1] = height[n-1]
    for i in range(n-2, -1, -1):
        right_max[i] = max(right_max[i+1], height[i])
    
    # Calculate the trapped water
    trapped_water = 0
    for i in range(n):
        trapped_water += min(left_max[i], right_max[i]) - height[i]
    
    return trapped_water

def Pascal(numRows):
    triangle = []

    for i in range(numRows):
        row = [1] * (i + 1)  # Start with all 1s
        for j in range(1, i):  # Fill interior elements
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        triangle.append(row)

    return triangle
