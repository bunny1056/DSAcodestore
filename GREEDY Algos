Activity Selection/ Interval Scheduling / maxlength chain pairs(sort by end time)
Goal: Maximize count of non-overlapping intervals
Intuition: Pick job that finishes earliest

def activitySelection(start, finish):
    n = len(start)
    intervals = list(zip(start, finish))
    intervals.sort(key=lambda x: x[1])

    count = 1
    end = intervals[0][1]

    for i in range(1, n):
        if intervals[i][0] >= end:
            count += 1
            end = intervals[i][1]

    return count

class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        cur_end = float('-inf')
        count = 0
        for s, e in pairs:
            if s > cur_end:
                count += 1
                cur_end = e
        return count

max_meetings
def maximumMeetings(self, start, end):
    meetings = list(zip(start, end))
    meetings.sort(key=lambda x: x[1])  # Sort by end time
    
    count = 0
    last_end_time = -1  # Initialize to -1 instead of 0
    
    for s, e in meetings:
        if s > last_end_time:  # Now works even if s=0
            count += 1
            last_end_time = e
    
    return count
meetings I
def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])
    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False
    return True

meetings II
import heapq

def minMeetingRooms(intervals):
    if not intervals:
        return 0

    # Sort by start times
    intervals.sort(key=lambda x: x[0])

    # Min-heap to store end times
    heap = []

    for meeting in intervals:
        start, end = meeting

        # If the room is free (meeting can start after the earliest one ends), reuse it
        if heap and heap[0] <= start:
            heapq.heappop(heap)

        # Allocate a new room (or reused one) and add its end time
        heapq.heappush(heap, end)

    # Heap size = number of rooms used
    return len(heap)

meetings III
import heapq

class Solution:
    def mostBooked(self, n: int, meetings: list[list[int]]) -> int:
        meetings.sort()
        idle = list(range(n))
        heapq.heapify(idle)
        busy = []
        count = [0] * n

        for s, e in meetings:
            # Free rooms ending by or before s
            while busy and busy[0][0] <= s:
                end_time, room_id = heapq.heappop(busy)
                heapq.heappush(idle, room_id)

            duration = e - s
            if idle:
                room_id = heapq.heappop(idle)
                heapq.heappush(busy, (e, room_id))
            else:
                end_time, room_id = heapq.heappop(busy)
                heapq.heappush(busy, (end_time + duration, room_id))

            count[room_id] += 1

        max_meetings = max(count)
        return min(i for i, c in enumerate(count) if c == max_meetings)

def minSum(self, arr, n):
        # Your code goes here
        if n == 1:
            return arr[0]
        heapq.heapify(arr)
        num1, num2 = [], []
    
        while arr:
            num1.append(str(heapq.heappop(arr)))
            if arr:
                num2.append(str(heapq.heappop(arr)))
    
        return int("".join(num1)) + int("".join(num2))

def minPartition(self, N):
        # code here
        coins = [1,2,5,10,20,50,100,200,500,2000]
        coins.sort(reverse=True)
        res = []
        
        for coin in coins:
            while N >= coin:
                N -= coin
                res.append(coin)
            if N == 0:
                break
        return res

Lemonade change
def lemonade_change(bills):
    count = {5: 0, 10: 0}
    
    for bill in bills:
        if bill == 5:
            count[5] += 1
        elif bill == 10:
            if count[5] == 0:
                return False
            count[5] -= 1
            count[10] += 1
        elif bill == 20:
            if count[10] > 0 and count[5] > 0:
                count[10] -= 1
                count[5] -= 1
            elif count[5] >= 3:
                count[5] -= 3
            else:
                return False
    return True

Jump Game I
def canJump(nums):
    max_reach = 0
    for i in range(len(nums)):
        if i > max_reach:
            return False
        max_reach = max(max_reach, i + nums[i])
        if max_reach >= len(nums) - 1:
            return True
    return False

Jump Game II
def jump(nums):
    n = len(nums)
    if n <= 1:
        return 0
    
    jumps = 0
    current_end = 0
    max_reach = 0
    
    for i in range(n - 1):
        max_reach = max(max_reach, i + nums[i])
        
        if i == current_end:
            jumps += 1
            current_end = max_reach
            if current_end >= n - 1:
                break
    
    return jumps

def jump(nums):
    n = len(nums)
    dp = [float('inf')] * n
    dp[0] = 0  # Base case: no jumps needed to reach the first index
    
    for i in range(1, n):
        for j in range(i):
            if j + nums[j] >= i:
                dp[i] = min(dp[i], dp[j] + 1)
    
    return dp[n-1]
def minCost(coin, n, k): 
    coin.sort()
    coins_needed = math.ceil(1.0 * n //
                            (k + 1));

    ans = 0
    for i in range(coins_needed - 1 + 1): 
        ans += coin[i]
    return ans

Assign Cookies
def findContentChildren(g, s):
    g.sort()
    s.sort()
    
    i = j = 0  # i: child index, j: cookie index
    while i < len(g) and j < len(s):
        if s[j] >= g[i]:
            i += 1  # assign cookie to child
        j += 1  # move to next cookie
    
    return i  # number of content children

def maxLevel(boxes, n):
    # Sort objects in increasing order of width
    boxes.sort()
    ans = 1 
    prev_width = boxes[0]
    prev_count = 1
    curr_count = 0
    curr_width = 0
    for i in range(1, n):
        curr_width += boxes[i]
        curr_count += 1
        if (curr_width > prev_width and curr_count > prev_count):
            prev_width = curr_width
            prev_count = curr_count
            curr_count = 0
            curr_width = 0
            ans += 1
    return ans

Job Scheduling
def jobSequencing(self, deadline, profit):
        # code here
        jobs = list(zip(deadline,profit))
        jobs.sort()
        
        pq = []
        ans = [0,0]
        
        for job in jobs:
            if job[0] > len(pq): #means we still have room to schedule within d slots.
                heapq.heappush(pq,job[1])
            elif pq and pq[0] < job[1]:
                heapq.heappushpop(pq,job[1])
        
        while pq:
            ans[1] += heapq.heappop(pq)
            ans[0] += 1
        
        return ans

def egyptian_fraction(a, b):
    result = []
    while a != 0:
        # Find the ceiling of b/a
        x = (b + a - 1) // a
        result.append(x)
        # Update a and b: a/b - 1/x = (a*x - b) / (b*x)
        a = a * x - b
        b = b * x

    return result

Fractional Knapsack
def fractionalknapsack(self, val, wt, capacity):
        n = len(val)
        ratios = []
        for i in range(n):
            ratio = val[i]/wt[i]
            ratios.append((ratio,val[i],wt[i]))
            
        ratios.sort(reverse=True, key=lambda x: x[0])

        total_val = 0
        rem_capacity = capacity
        
        for ratio, v, w in ratios:
            if rem_capacity >= w:
                total_val += v
                rem_capacity -= w
            else:
                total_val += (v/w) * rem_capacity
                break
        return float(total_val)

def smallestNumber(s: int, d: int) -> str:
    if s < 1 or s > 9 * d:
        return "-1"
    res = ['0'] * d
    s -= 1 #ensuring leading digit = 1
    for i in range(d - 1, 0, -1):
        take = min(9, s)
        res[i] = str(take)
        s -= take
    res[0] = str(s + 1)
    return ''.join(res)

CHOCOLA problem min cost to cut in 1X1 squares (same as merge sort)
def min_cost_to_cut_chocolate(horizontal_cuts, vertical_cuts):
    # Sort in descending order
    horizontal_cuts.sort(reverse=True)
    vertical_cuts.sort(reverse=True)

    h_segments = 1  # initially one vertical segment
    v_segments = 1  # initially one horizontal segment

    i = j = 0
    cost = 0

    while i < len(horizontal_cuts) and j < len(vertical_cuts):
        if horizontal_cuts[i] > vertical_cuts[j]:
            cost += horizontal_cuts[i] * v_segments
            h_segments += 1
            i += 1
        else:
            cost += vertical_cuts[j] * h_segments
            v_segments += 1
            j += 1

    # Process remaining horizontal cuts
    while i < len(horizontal_cuts):
        cost += horizontal_cuts[i] * v_segments
        i += 1

    # Process remaining vertical cuts
    while j < len(vertical_cuts):
        cost += vertical_cuts[j] * h_segments
        j += 1

    return cost

from collections import deque, defaultdict

def minEdgeReversals(N, M, edges, src, dst):
    graph = defaultdict(list)

    # Build the modified graph
    for u, v in edges:
        graph[u].append((v, 0))  # original direction, no cost
        graph[v].append((u, 1))  # reversed edge, cost = 1

    # 0-1 BFS
    dq = deque()
    dq.append((src, 0))  # (node, cost)
    visited = [False] * (N + 1)

    while dq:
        node, cost = dq.popleft()

        if node == dst:
            return cost

        if visited[node]:
            continue
        visited[node] = True

        for nei, wt in graph[node]:
            if not visited[nei]:
                if wt == 0:
                    dq.appendleft((nei, cost))  # 0-cost edge
                else:
                    dq.append((nei, cost + 1))  # 1-cost edge

    return -1  # if dst is unreachable

def minCashFlow(graph):
    N = len(graph)
    
    # Step 1: Compute net balance
    amount = [0] * N
    for i in range(N):
        for j in range(N):
            amount[i] += graph[j][i] - graph[i][j]

    # Only consider non-zero balances
    def get_max_credit_debit():
        max_credit = max([(i, amt) for i, amt in enumerate(amount)], key=lambda x: x[1])
        max_debit = min([(i, amt) for i, amt in enumerate(amount)], key=lambda x: x[1])
        return max_credit[0], max_debit[0]

    res = []

    def settle():
        mxC, mxD = get_max_credit_debit()

        if amount[mxC] == 0 and amount[mxD] == 0:
            return

        min_amt = min(amount[mxC], -amount[mxD])
        amount[mxC] -= min_amt
        amount[mxD] += min_amt
        res.append((mxD, mxC, min_amt))

        settle()

    settle()

    return res

Gas Station
class Solution:
    def canCompleteCircuit(self, gas, cost):
        total_tank = 0
        curr_tank = 0
        start_station = 0

        for i in range(len(gas)):
            total_tank += gas[i] - cost[i]
            curr_tank += gas[i] - cost[i]

            if curr_tank < 0:
                start_station = i + 1
                curr_tank = 0

        return start_station if total_tank >= 0 else -1

Minimum platforms
def findPlatform(arr, dep, n):
    arr.sort()
    dep.sort()
    
    platforms_needed = 1
    max_platforms = 1
    i = 1
    j = 0
    
    while i < n and j < n:
        if arr[i] <= dep[j]:
            platforms_needed += 1
            i += 1
            if platforms_needed > max_platforms:
                max_platforms = platforms_needed
        else:
            platforms_needed -= 1
            j += 1
    
    return max_platforms

CANDY
def candy(self, ratings: List[int]) -> int:
        candies = [1] * len(ratings)
        n = len(ratings)

        for i in range(1,n):
            if ratings[i] > ratings[i-1]:
                candies[i] = candies[i-1] + 1

        for i in range(n-2,-1,-1):
            if ratings[i] > ratings[i+1]:
                candies[i] = max(candies[i],candies[i+1]+1)

        return sum(candies) 

insert interval
from typing import List

def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    result = []
    i = 0
    n = len(intervals)

    # 1. Add intervals before newInterval
    while i < n and intervals[i][1] < newInterval[0]:
        result.append(intervals[i])
        i += 1

    # 2. Merge overlapping intervals
    while i < n and intervals[i][0] <= newInterval[1]:
        newInterval[0] = min(newInterval[0], intervals[i][0])
        newInterval[1] = max(newInterval[1], intervals[i][1])
        i += 1
    result.append(newInterval)

    # 3. Add remaining intervals
    while i < n:
        result.append(intervals[i])
        i += 1

    return result

Merge intervals
from typing import List

def merge(self, intervals: List[List[int]]) -> List[List[int]]:
    if not intervals:
        return []

    # First, sort the intervals by starting time
    intervals.sort(key=lambda x: x[0])
    res = [intervals[0]]

    for i in range(1, len(intervals)):
        last = res[-1]
        current = intervals[i]
        
        # If they overlap, merge
        if last[1] >= current[0]:
            last[1] = max(last[1], current[1])
        else:
            res.append(current)

    return res

Non overlapping intervals
from typing import List

def eraseOverlapIntervals(intervals: List[List[int]]) -> int:
    # Step 1: Sort by end time
    intervals.sort(key=lambda x: x[1])

    count = 0
    prev_end = float('-inf')

    for start, end in intervals:
        if start >= prev_end:
            # No overlap, include this interval
            prev_end = end
        else:
            # Overlap, we need to remove this one
            count += 1

    return count

def findOrder(height, infront):
    # Write your code here.
    pass
    people = list(zip(height, infront))
    # Sort people in descending order of height, and ascending order of infront (though heights are unique)
    people.sort(key=lambda x: (-x[0], x[1]))
    
    result = []
    for p in people:
        h, k = p
        result.insert(k, h)
    
    return result
Sort by Height in Descending Order: First, we sort all people in descending order of their height. For people of the same height, we sort them in ascending order of their "infront" values (though the problem states all heights are unique, so this might not be necessary here).

Insert into the Result List: For each person in the sorted list, we insert them into the result list at the position specified by their "infront" value. This works because all taller people have already been placed, and inserting at the "infront" position ensures that exactly that many taller people are in front of them.

def longestZigZag(arr):
    n = len(arr)
    if n < 2:
        return n

    count = 1  # At least one element is part of the subsequence
    prev_diff = 0

    for i in range(1, n):
        diff = arr[i] - arr[i - 1]
        if (diff > 0 and prev_diff <= 0) or (diff < 0 and prev_diff >= 0):
            count += 1
            prev_diff = diff

    return count
