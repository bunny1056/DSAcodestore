# Iterative Binary Search
def binary_search_iterative(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        # If target is found at mid, return the index
        if arr[mid] == target:
            return mid
        
        # If target is greater, ignore left half
        elif arr[mid] < target:
            left = mid + 1
        
        # If target is smaller, ignore right half
        else:
            right = mid - 1
    
    # Target not present in array
    return -1

# Selection Sort - REMEMBER MIN_INDEX
def selection_sort(arr):
    # Traverse through all array elements
    for i in range(len(arr)):
        # Find the minimum element in remaining unsorted array
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        
        # Swap the found minimum element with the first element of unsorted portion
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    
    return arr

# Insertion Sort
def insertion_sort(L):
    if len(L) == 0:
        return L
    for i in range(1, len(L)):
        # Assume L[:i] is sorted
        # Move L[i] to correct position in L[:i]
        j = i
        while j > 0 and L[j] < L[j-1]:
            L[j], L[j-1] = L[j-1], L[j]
            j -= 1
        # Now L[:i+1] is sorted
    return L

def merge(A, B):
    # Get lengths of both lists
    m = len(A)
    n = len(B)
    
    # Initialize an empty list C to store the merged result
    C = []
    
    # Initialize indices for both lists
    i = 0  # Index for list A
    j = 0  # Index for list B
    
    # Case 1: Compare elements from both lists
    while i < m and j < n:
        if A[i] <= B[j]:
            C.append(A[i])
            i += 1
        else:
            C.append(B[j])
            j += 1
    
    # Case 2: Append remaining elements from A (if any)
    while i < m:
        C.append(A[i])
        i += 1
    
    # Case 3: Append remaining elements from B (if any)
    while j < n:
        C.append(B[j])
        j += 1
    
    return C

def merge_sort(L):
    # Get length of the list
    n = len(L)
    
    # List is already sorted if it contains 0 or 1 element
    if n <= 1:
        return L
    
    # Find the middle point
    mid = n // 2
    
    # Sort the left half of the list
    left_half = merge_sort(L[:mid])
    
    # Sort the right half of the list
    right_half = merge_sort(L[mid:])
    
    # Merge the two sorted halves
    sorted_merged_list = merge(left_half, right_half)
    
    return sorted_merged_list

def partition(L, lower, upper):
    # Choose the element at lower as the pivot
    pivot = L[lower]
    i = lower  # Index of smaller element
    
    # Traverse through all elements from lower + 1 to upper
    for j in range(lower + 1, upper):
        # If current element is less than or equal to pivot
        if L[j] <= pivot:
            i += 1  # Increment index of smaller element
            # Swap L[i] and L[j]
        L[i], L[j] = L[j], L[i]
    
    # Swap L[lower] (pivot) and L[i] to place pivot in its correct position
    L[lower], L[i] = L[i], L[lower]
    
    # Return the position where the pivot is placed
    return i

def quick_sort(L, lower, upper):
    # If lower < upper, there are elements to sort
    if lower < upper:
        # Partition the array and get the pivot position
        pivot_pos = partition(L, lower, upper)
        
        # Recursively sort the left part (elements before pivot)
        quick_sort(L, lower, pivot_pos - 1)
        
        # Recursively sort the right part (elements after pivot)
        quick_sort(L, pivot_pos + 1, upper)
    
    return L

