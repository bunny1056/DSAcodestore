Backtracking is:

“Trying a choice, going forward, and if it leads to a dead end, undoing that choice and trying something else.”

res = []

def backtrack(path, options):
    if done_condition(path):
        res.append(path[:])
        return

    for i in range(len(options)):
        pick an option
        update path and state
        backtrack(new path, remaining options)
        undo the choice (backtrack)

def subsets(nums):
    def subsetsWithDup(nums):
    res = []
    nums.sort()  # sort to bring duplicates together

    def backtrack(start, path):
        res.append(path[:])  # add a copy of the current path

        for i in range(start, len(nums)):
            # Skip duplicates at the same recursion depth
            if i > start and nums[i] == nums[i - 1]:
                continue

            path.append(nums[i])
            backtrack(i + 1, path)
            path.pop()

    backtrack(0, [])
    return res

Combination sum I
def combinationSum(candidates, target):
    res = []
    
    def backtrack(start, path, total):
        if total == target:
            res.append(path[:])
            return
        if total > target:
            return
        
        for i in range(start, len(candidates)):
            path.append(candidates[i])
            backtrack(i, path, total + candidates[i])  # i, not i+1 → reuse allowed
            path.pop()
    
    backtrack(0, [], 0)
    return res

Combination Sum II
def combinationSum2(candidates, target):
    res = []
    candidates.sort()
    
    def backtrack(start, path, total):
        if total == target:
            res.append(path[:])
            return
        if total > target:
            return
        
        for i in range(start, len(candidates)):
            if i > start and candidates[i] == candidates[i - 1]:
                continue  # skip duplicates
            path.append(candidates[i])
            backtrack(i + 1, path, total + candidates[i])  # i + 1 → use once
            path.pop()
    
    backtrack(0, [], 0)
    return res
using DFS
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        
        #setup
        result = []
        combination = []
        candidates.sort() #to group the same candidates together

        def dfs(index,target):

            #is a solution
            if target == 0: 
                result.append(combination.copy()) 

            elif index < len(candidates): #do unconsiderd candidates remain?
                if target >= candidates[index]: #is it possible to add more candidates to combination and get a solution?

                    combination.append(candidates[index])
                    dfs(index+1, target - candidates[index]) #with candidate at this index and all equivalents before index
                    combination.pop()

                    # without candidate at this index and any equivalents after index
                    for i in range(index+1,len(candidates)): #
                        if candidates[index] != candidates[i]:
                            dfs(i,target) #with next unique candidate
                            break

        dfs(0,target) # construction of result
        return result # return after construction

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        res = []
        def backTracking(i, sub):
            if i == len(s):
                res.append(sub[:])
                return
            ns = ""
            for j in range(i, len(s)):
                ns += s[j]
                if ns == ns[::-1]:
                    sub.append(ns)
                    backTracking(j+1, sub)
                    sub.pop()

        backTracking(0, [])
        return res

Generate Permutations
def permuteUnique(nums):
    res = []
    nums.sort()  # Sort to handle duplicates
    used = [False] * len(nums)

    def backtrack(path):
        if len(path) == len(nums):
            res.append(path[:])
            return
        for i in range(len(nums)):
            # Skip used elements
            if used[i]:
                continue
            # Skip duplicates: if current is same as previous and previous not used
            if i > 0 and nums[i] == nums[i-1] and not used[i-1]:
                continue
            used[i] = True
            path.append(nums[i])
            backtrack(path)
            path.pop()
            used[i] = False

    backtrack([])
    return res

Get Permutation
def getPermutation(n, k):
    import math

    nums = [str(i) for i in range(1, n + 1)]
    k -= 1  # Convert to 0-indexed
    result = []

    for i in range(n, 0, -1):
        fact = math.factorial(i - 1)
        index = k // fact
        result.append(nums.pop(index))
        k %= fact

    return ''.join(result)

def solveNQueens(n):
    res = []

    def backtrack(row, cols, diag1, diag2, board):
        if row == n:
            res.append(["".join(r) for r in board])
            return

        for col in range(n):
            if col in cols or (row - col) in diag1 or (row + col) in diag2:
                continue  # unsafe position

            # ✅ Try placing queen
            board[row][col] = 'Q'
            cols.add(col)
            diag1.add(row - col)
            diag2.add(row + col)

            backtrack(row + 1, cols, diag1, diag2, board)

            # 🔙 Backtrack: remove queen
            board[row][col] = '.'
            cols.remove(col)
            diag1.remove(row - col)
            diag2.remove(row + col)

    board = [["."] * n for _ in range(n)]
    backtrack(0, set(), set(), set(), board)
    return res
