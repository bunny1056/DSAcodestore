    def removeOuterParentheses(self, s: str) -> str:
        result = []
        depth = 0

        for ch in s:
            if ch == '(':
                if depth > 0:
                    result.append(ch)
                depth += 1
            else:  # ch == ')'
                depth -= 1
                if depth > 0:
                    result.append(ch)

        return ''.join(result)

def reverseWords(self, s: str) -> str:
        words = s.strip().split()
        return ' '.join(reversed(words))

def largestOddNumber(self, num: str) -> str:
        return num.rstrip("02468")
def largestOddNumber(self, num: str) -> str:
    for i in range(len(num) - 1, -1, -1):
        if int(num[i]) % 2 == 1:  # Check for odd digit
            return num[:i+1]     # Return substring up to that digit
        return ""  # No odd digit found

def isIsomorphic(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False

    # Mapping from characters in s to characters in t
    s_to_t = {}
    # Mapping from characters in t to characters in s
    t_to_s = {}

    for ch_s, ch_t in zip(s, t):
        if ch_s in s_to_t:
            if s_to_t[ch_s] != ch_t:
                return False
        else:
            s_to_t[ch_s] = ch_t

        if ch_t in t_to_s:
            if t_to_s[ch_t] != ch_s:
                return False
        else:
            t_to_s[ch_t] = ch_s

    return True

def rotateString(s: str, goal: str) -> bool:
    return len(s) == len(goal) and goal in (s + s)

from collections import Counter

def frequencySort(s: str) -> str:
    freq = Counter(s)
    # Sort characters by frequency (high to low)
    sorted_chars = sorted(freq.items(), key=lambda x: -x[1])
    # Build result by repeating each character
    return ''.join(char * count for char, count in sorted_chars)

longest palindrome substring
def longestPalindrome(s: str) -> str:
    def expandAroundCenter(left: int, right: int) -> str:
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left+1:right]

    longest = ""
    for i in range(len(s)):
        # Odd length palindrome
        p1 = expandAroundCenter(i, i)
        # Even length palindrome
        p2 = expandAroundCenter(i, i+1)
        # Update longest if necessary
        if len(p1) > len(longest):
            longest = p1
        if len(p2) > len(longest):
            longest = p2

    return longest

def repeatedStringMatch(a: str, b: str) -> int:
    repeat = 1
    repeated = a

    while len(repeated) < len(b):
        repeated += a
        repeat += 1

    if b in repeated:
        return repeat

    repeated += a  # One more repeat for possible overlap
    if b in repeated:
        return repeat + 1

    return -1
