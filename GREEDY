ratios.sort(reverse=True, key=lambda x: x[0])

Fractional Knapsack
def fractionalknapsack(self, val, wt, capacity):
        #code here
        n = len(val)
        ratios = []
        for i in range(n):
            ratio = val[i]/wt[i]
            ratios.append((ratio,val[i],wt[i]))
            
        ratios.sort(reverse=True, key=lambda x: x[0])

        total_val = 0
        rem_capacity = capacity
        
        for ratio, v, w in ratios:
            if rem_capacity >= w:
                total_val += v
                rem_capacity -= w
            else:
                total_val += (v/w) * rem_capacity
                break
        return float(total_val)
Approach2
import heapq

def fractionalKnapsack(val, wt, capacity):
    n = len(val)
    max_heap = []
    
    # Push all items into max-heap (using negative ratio for max-heap simulation)
    for i in range(n):
        ratio = - (val[i] / wt[i])  # Negative for max-heap
        heapq.heappush(max_heap, (ratio, wt[i], val[i]))
    
    total_val = 0
    rem_capacity = capacity
    
    while max_heap and rem_capacity > 0:
        ratio, w, v = heapq.heappop(max_heap)
        ratio = -ratio  # Convert back to positive
        
        if rem_capacity >= w:
            total_val += v
            rem_capacity -= w
        else:
            fraction = rem_capacity / w
            total_val += fraction * v
            rem_capacity = 0  # Knapsack is full
    
    return float(total_val)

Min number of coins
def minPartition(self, N):
        # code here
        coins = [1,2,5,10,20,50,100,200,500,2000]
        coins.sort(reverse=True)
        res = []
        for coin in coins:
            while N >= coin:
                N -= coin
                res.append(coin)
            if N == 0:
                break
        return res
import heapq

def minCoinsHeap(coins, N):
    # Create a max-heap by pushing negative values (since Python's heapq is min-heap by default)
    max_heap = []
    for coin in coins:
        heapq.heappush(max_heap, -coin)  # Store negatives for max-heap effect
    
    result = []
    while N > 0 and max_heap:
        # Get the largest coin â‰¤ remaining N
        current_coin = -heapq.heappop(max_heap)
        if current_coin > N:
            continue  # Skip coins larger than remaining N
        # Use as many of current_coin as possible
        count = N // current_coin
        N -= count * current_coin
        result.extend([current_coin] * count)
    
    return result

Lemonade change
def lemonade_change(bills):
    count = {5: 0, 10: 0}
    
    for bill in bills:
        if bill == 5:
            count[5] += 1
        elif bill == 10:
            if count[5] == 0:
                return False
            count[5] -= 1
            count[10] += 1
        elif bill == 20:
            if count[10] > 0 and count[5] > 0:
                count[10] -= 1
                count[5] -= 1
            elif count[5] >= 3:
                count[5] -= 3
            else:
                return False
    return True

max_meetings
def maximumMeetings(self, start, end):
    meetings = list(zip(start, end))
    meetings.sort(key=lambda x: x[1])  # Sort by end time
    
    count = 0
    last_end_time = -1  # Initialize to -1 instead of 0
    
    for s, e in meetings:
        if s > last_end_time:  # Now works even if s=0
            count += 1
            last_end_time = e
    
    return count
meetings I
def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])
    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False
    return True
meetings II
import heapq

def minMeetingRooms(intervals):
    if not intervals:
        return 0

    # Sort by start times
    intervals.sort(key=lambda x: x[0])

    # Min-heap to store end times
    heap = []

    for meeting in intervals:
        start, end = meeting

        # If the room is free (meeting can start after the earliest one ends), reuse it
        if heap and heap[0] <= start:
            heapq.heappop(heap)

        # Allocate a new room (or reused one) and add its end time
        heapq.heappush(heap, end)

    # Heap size = number of rooms used
    return len(heap)
meetings III
import heapq

class Solution:
    def mostBooked(self, n: int, meetings: list[list[int]]) -> int:
        meetings.sort()
        idle = list(range(n))
        heapq.heapify(idle)
        busy = []
        count = [0] * n

        for s, e in meetings:
            # Free rooms ending by or before s
            while busy and busy[0][0] <= s:
                end_time, room_id = heapq.heappop(busy)
                heapq.heappush(idle, room_id)

            duration = e - s
            if idle:
                room_id = heapq.heappop(idle)
                heapq.heappush(busy, (e, room_id))
            else:
                end_time, room_id = heapq.heappop(busy)
                heapq.heappush(busy, (end_time + duration, room_id))

            count[room_id] += 1

        max_meetings = max(count)
        return min(i for i, c in enumerate(count) if c == max_meetings)

Jump Game I
def canJump(nums):
    max_reach = 0
    for i in range(len(nums)):
        if i > max_reach:
            return False
        max_reach = max(max_reach, i + nums[i])
        if max_reach >= len(nums) - 1:
            return True
    return True

Jump Game II
def jump(nums):
    n = len(nums)
    if n <= 1:
        return 0
    
    jumps = 0
    current_end = 0
    max_reach = 0
    
    for i in range(n - 1):
        max_reach = max(max_reach, i + nums[i])
        
        if i == current_end:
            jumps += 1
            current_end = max_reach
            if current_end >= n - 1:
                break
    
    return jumps

def jump(nums):
    n = len(nums)
    dp = [float('inf')] * n
    dp[0] = 0  # Base case: no jumps needed to reach the first index
    
    for i in range(1, n):
        for j in range(i):
            if j + nums[j] >= i:
                dp[i] = min(dp[i], dp[j] + 1)
    
    return dp[n-1]

Minimum platforms
def findPlatform(arr, dep, n):
    arr.sort()
    dep.sort()
    
    platforms_needed = 1
    max_platforms = 1
    i = 1
    j = 0
    
    while i < n and j < n:
        if arr[i] <= dep[j]:
            platforms_needed += 1
            i += 1
            if platforms_needed > max_platforms:
                max_platforms = platforms_needed
        else:
            platforms_needed -= 1
            j += 1
    
    return max_platforms

CANDY
def candy(self, ratings: List[int]) -> int:
        candies = [1] * len(ratings)
        n = len(ratings)

        for i in range(1,n):
            if ratings[i] > ratings[i-1]:
                candies[i] = candies[i-1] + 1

        for i in range(n-2,-1,-1):
            if ratings[i] > ratings[i+1]:
                candies[i] = max(candies[i],candies[i+1]+1)

        return sum(candies) 
https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/

insert interval
from typing import List

def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    result = []
    i = 0
    n = len(intervals)

    # 1. Add intervals before newInterval
    while i < n and intervals[i][1] < newInterval[0]:
        result.append(intervals[i])
        i += 1

    # 2. Merge overlapping intervals
    while i < n and intervals[i][0] <= newInterval[1]:
        newInterval[0] = min(newInterval[0], intervals[i][0])
        newInterval[1] = max(newInterval[1], intervals[i][1])
        i += 1
    result.append(newInterval)

    # 3. Add remaining intervals
    while i < n:
        result.append(intervals[i])
        i += 1

    return result

Merge intervals
from typing import List

def merge(self, intervals: List[List[int]]) -> List[List[int]]:
    if not intervals:
        return []

    # First, sort the intervals by starting time
    intervals.sort(key=lambda x: x[0])
    res = [intervals[0]]

    for i in range(1, len(intervals)):
        last = res[-1]
        current = intervals[i]
        
        # If they overlap, merge
        if last[1] >= current[0]:
            last[1] = max(last[1], current[1])
        else:
            res.append(current)

    return res

Non overlapping intervals
from typing import List

def eraseOverlapIntervals(intervals: List[List[int]]) -> int:
    # Step 1: Sort by end time
    intervals.sort(key=lambda x: x[1])

    count = 0
    prev_end = float('-inf')

    for start, end in intervals:
        if start >= prev_end:
            # No overlap, include this interval
            prev_end = end
        else:
            # Overlap, we need to remove this one
            count += 1

    return count

job sequencing problm
def job_sequencing(deadline, profit):
    n = len(deadline)
    jobs = list(zip(deadline, profit))
    # Sort jobs by profit in descending order
    jobs.sort(key=lambda x: -x[1])
    
    max_deadline = max(deadline)
    slots = [False] * (max_deadline + 1)  # 1-based indexing
    
    count = 0
    total_profit = 0
    
    for d, p in jobs:
        # Find the latest available slot before deadline d
        for i in range(d, 0, -1):
            if not slots[i]:
                slots[i] = True
                count += 1
                total_profit += p
                break
    
    return [count, total_profit]

def findOrder(height, infront):
    # Write your code here.
    pass
    people = list(zip(height, infront))
    # Sort people in descending order of height, and ascending order of infront (though heights are unique)
    people.sort(key=lambda x: (-x[0], x[1]))
    
    result = []
    for p in people:
        h, k = p
        result.insert(k, h)
    
    return result
Sort by Height in Descending Order: First, we sort all people in descending order of their height. For people of the same height, we sort them in ascending order of their "infront" values (though the problem states all heights are unique, so this might not be necessary here).

Insert into the Result List: For each person in the sorted list, we insert them into the result list at the position specified by their "infront" value. This works because all taller people have already been placed, and inserting at the "infront" position ensures that exactly that many taller people are in front of them.
