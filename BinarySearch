def searchMatrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    m, n = len(matrix), len(matrix[0])
    left, right = 0, m * n - 1

    while left <= right:
        mid = (left + right) // 2
        row = mid // n
        col = mid % n
        mid_val = matrix[row][col]

        if mid_val == target:
            return True
        elif mid_val < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

def searchMatrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    rows, cols = len(matrix), len(matrix[0])
    i, j = 0, cols - 1  # Start from top-right corner

    while i < rows and j >= 0:
        if matrix[i][j] == target:
            return True
        elif matrix[i][j] > target:
            j -= 1  # Move left
        else:
            i += 1  # Move down

    return False

def findPeakGrid(mat):
    m, n = len(mat), len(mat[0])
    
    left, right = 0, n - 1

    while left <= right:
        mid_col = (left + right) // 2

        # Find the row index of the maximum element in the mid column
        max_row = 0
        for i in range(m):
            if mat[i][mid_col] > mat[max_row][mid_col]:
                max_row = i

        left_val = mat[max_row][mid_col - 1] if mid_col - 1 >= 0 else -1
        right_val = mat[max_row][mid_col + 1] if mid_col + 1 < n else -1
        curr_val = mat[max_row][mid_col]

        if curr_val > left_val and curr_val > right_val:
            return [max_row, mid_col]
        elif left_val > curr_val:
            right = mid_col - 1
        else:
            left = mid_col + 1

def median(matrix):
    rows, cols = len(matrix), len(matrix[0])

    # Find global min and max from the matrix
    low = min(row[0] for row in matrix)
    high = max(row[-1] for row in matrix)

    desired = (rows * cols) // 2  # Index of the median

    def countLessEqual(row, target):
        low, high = 0, len(row) - 1
        while low <= high:
            mid = (low + high) // 2
            if row[mid] <= target:
                low = mid + 1
            else:
                high = mid - 1
        return low

    while low <= high:
        mid = (low + high) // 2
        count = 0
        for row in matrix:
            count += countLessEqual(row, mid)

        if count <= desired:
            low = mid + 1
        else:
            high = mid - 1

    return low

def twoSum(nums, target):
    left, right = 0, len(nums) - 1
    while left < right:
        current_sum = nums[left] + nums[right]
        if current_sum == target:
            return [left, right]
        elif current_sum < target:
            left += 1
        else:
            right -= 1

3sum
def threeSum(nums):
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n):
        # Skip the same `nums[i]` to avoid duplicate triplets
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        
        target = -nums[i]
        left = i + 1
        right = n - 1

        while left < right:
            sum_two = nums[left] + nums[right]
            if sum_two == target:
                result.append([nums[i], nums[left], nums[right]])
                left += 1
                right -= 1

                # Skip duplicates for left and right
                while left < right and nums[left] == nums[left - 1]:
                    left += 1
                while left < right and nums[right] == nums[right + 1]:
                    right -= 1
            elif sum_two < target:
                left += 1
            else:
                right -= 1

    return result

4-sum
def fourSum(nums, target):
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n):
        # Skip duplicates for first number
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n):
            # Skip duplicates for second number
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left = j + 1
            right = n - 1

            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1

                    # Skip duplicates for third and fourth numbers
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1

                elif total < target:
                    left += 1
                else:
                    right -= 1

    return result


If the problem asks to minimize the maximum, go right = mid - 1 on success.
If it asks to maximize the minimum, go left = mid + 1 on success.

ANSWERS
def is_valid(x):  # x = candidate answer
    # implement the condition check
    return True or False

def binary_search():
    low, high = min_val, max_val
    answer = high

    while low <= high:
        mid = (low + high) // 2

        if is_valid(mid):
            answer = mid  # or max(answer, mid) for maximum
            high = mid - 1
        else:
            low = mid + 1

    return answer

Koko eating bananas/Find smallest divisor
def minEatingSpeed(piles: List[int], h: int) -> int:
    def is_valid(k):
        hours = 0
        for pile in piles:
            hours += (pile + k - 1) // k  # same as math.ceil(pile / k)
        return hours <= h

    left, right = 1, max(piles)
    answer = -1

    while left <= right:
        mid = (left + right) // 2
        if is_valid(mid):
            answer = mid
            right = mid - 1  # try smaller k
        else:
            left = mid + 1   # need faster eating speed

    return answer

min days for bouqets
def is_valid(day):
    bouquets = 0     # how many bouquets we can make
    flowers = 0      # current streak of adjacent bloomed flowers

    for bloom in bloomDay:
        if bloom <= day:
            flowers += 1   # this flower is usable

            if flowers == k:       # we have enough for a bouquet
                bouquets += 1      # one bouquet done
                flowers = 0        # reset for next bouquet
        else:
            flowers = 0  # break in adjacency — reset
    return bouquets >= m
    low = min(bloomDay)
    high = max(bloomDay)
    answer = -1

    while low <= high:
        mid = (low + high) // 2
        if is_valid(mid):
            answer = mid
            high = mid - 1  # try to find an earlier day
        else:
            low = mid + 1

    return answer

kth positive
def findKthPositive(arr, k):
    missing = []
    i = 0
    num = 1
    while len(missing) < k:
        if i < len(arr) and arr[i] == num:
            i += 1
        else:
            missing.append(num)
        num += 1
    return missing[-1]

def findKthPositive(arr, k):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        missing = arr[mid] - (mid + 1)

        if missing < k:
            left = mid + 1
        else:
            right = mid - 1

    return left + k

def is_valid(arr, n, cows, dist):
    count = 1
    last_pos = arr[0]
    
    for i in range(1, n):
        if arr[i] - last_pos >= dist:
            count += 1
            last_pos = arr[i]
            if count == cows:
                return True
    return False

def aggressive_cows(arr, cows):
    arr.sort()
    n = len(arr)
    
    low = 1  # minimum possible distance
    high = arr[-1] - arr[0]  # maximum possible distance
    ans = -1
    
    while low <= high:
        mid = (low + high) // 2
        if is_valid(arr, n, cows, mid):
            ans = mid
            low = mid + 1  # try for larger minimum distance
        else:
            high = mid - 1  # try for smaller distance
    return ans

def findPages(self, arr, k):
    def is_feasible(max_sum):
        count = 1
        curr_sum = 0
        for num in arr:
            if num > max_sum:
                return False
            curr_sum += num
            if curr_sum > max_sum:
                count += 1
                curr_sum = num
        return count <= k

    if k > len(arr):
        return -1  # Not enough books

    left = max(arr)
    right = sum(arr)
    ans = -1

    while left <= right:
        mid = (left + right) // 2
        if is_feasible(mid):
            ans = mid
            right = mid - 1     # ✅ Try smaller maximum
        else:
            left = mid + 1

    return ans

Equalize the towers:
def minCost(heights, cost):
    def total_cost(x):
        return sum(abs(h - x) * c for h, c in zip(heights, cost))

    def is_valid(x):
        # x is a candidate height. We compare its cost with neighbors to decide direction.
        return total_cost(x) <= total_cost(x + 1)

    def binary_search():
        low, high = min(heights), max(heights)
        answer = high

        while low <= high:
            mid = (low + high) // 2

            if is_valid(mid):
                answer = mid
                high = mid - 1
            else:
                low = mid + 1

        return total_cost(answer)

    return binary_search()

def findMedianSortedArrays(nums1, nums2):
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1  # Always binary search the smaller array
    
    x, y = len(nums1), len(nums2)
    low, high = 0, x

    while low <= high:
        partitionX = (low + high) // 2
        partitionY = (x + y + 1) // 2 - partitionX

        maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]
        minRightX = float('inf') if partitionX == x else nums1[partitionX]

        maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]
        minRightY = float('inf') if partitionY == y else nums2[partitionY]

        if maxLeftX <= minRightY and maxLeftY <= minRightX:
            # Found correct partition
            if (x + y) % 2 == 0:
                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2.0
            else:
                return max(maxLeftX, maxLeftY)
        elif maxLeftX > minRightY:
            high = partitionX - 1  # Move left
        else:
            low = partitionX + 1  # Move right

def kthElement(a, b, k):
    if len(a) > len(b):
        return kthElement(b, a, k)  # always binary search on smaller array
    
    n, m = len(a), len(b)
    
    low = max(0, k - m)
    high = min(k, n)

    while low <= high:
        cutA = (low + high) // 2
        cutB = k - cutA

        l1 = float('-inf') if cutA == 0 else a[cutA - 1]
        l2 = float('-inf') if cutB == 0 else b[cutB - 1]
        r1 = float('inf') if cutA == n else a[cutA]
        r2 = float('inf') if cutB == m else b[cutB]

        if l1 <= r2 and l2 <= r1:
            return max(l1, l2)
        elif l1 > r2:
            high = cutA - 1
        else:
            low = cutA + 1
    
    return -1  # should never reach here
