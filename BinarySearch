def twoSum(nums, target):
    left, right = 0, len(nums) - 1
    while left < right:
        current_sum = nums[left] + nums[right]
        if current_sum == target:
            return [left, right]
        elif current_sum < target:
            left += 1
        else:
            right -= 1

If the problem asks to minimize the maximum, go right = mid - 1 on success.
If it asks to maximize the minimum, go left = mid + 1 on success.

ANSWERS
def is_valid(x):  # x = candidate answer
    # implement the condition check
    return True or False

def binary_search():
    low, high = min_val, max_val
    answer = high

    while low <= high:
        mid = (low + high) // 2

        if is_valid(mid):
            answer = mid  # or max(answer, mid) for maximum
            high = mid - 1
        else:
            low = mid + 1

    return answer

Koko eating bananas/Find smallest divisor
def minEatingSpeed(piles: List[int], h: int) -> int:
    def is_valid(k):
        hours = 0
        for pile in piles:
            hours += (pile + k - 1) // k  # same as math.ceil(pile / k)
        return hours <= h

    left, right = 1, max(piles)
    answer = -1

    while left <= right:
        mid = (left + right) // 2
        if is_valid(mid):
            answer = mid
            right = mid - 1  # try smaller k
        else:
            left = mid + 1   # need faster eating speed

    return answer

min days for bouqets
def is_valid(day):
    bouquets = 0     # how many bouquets we can make
    flowers = 0      # current streak of adjacent bloomed flowers

    for bloom in bloomDay:
        if bloom <= day:
            flowers += 1   # this flower is usable

            if flowers == k:       # we have enough for a bouquet
                bouquets += 1      # one bouquet done
                flowers = 0        # reset for next bouquet
        else:
            flowers = 0  # break in adjacency — reset
    return bouquets >= m
    low = min(bloomDay)
    high = max(bloomDay)
    answer = -1

    while low <= high:
        mid = (low + high) // 2
        if is_valid(mid):
            answer = mid
            high = mid - 1  # try to find an earlier day
        else:
            low = mid + 1

    return answer

kth positive
def findKthPositive(arr, k):
    missing = []
    i = 0
    num = 1
    while len(missing) < k:
        if i < len(arr) and arr[i] == num:
            i += 1
        else:
            missing.append(num)
        num += 1
    return missing[-1]

def findKthPositive(arr, k):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        missing = arr[mid] - (mid + 1)

        if missing < k:
            left = mid + 1
        else:
            right = mid - 1

    return left + k

def is_valid(arr, n, cows, dist):
    count = 1
    last_pos = arr[0]
    
    for i in range(1, n):
        if arr[i] - last_pos >= dist:
            count += 1
            last_pos = arr[i]
            if count == cows:
                return True
    return False

def aggressive_cows(arr, cows):
    arr.sort()
    n = len(arr)
    
    low = 1  # minimum possible distance
    high = arr[-1] - arr[0]  # maximum possible distance
    ans = -1
    
    while low <= high:
        mid = (low + high) // 2
        if is_valid(arr, n, cows, mid):
            ans = mid
            low = mid + 1  # try for larger minimum distance
        else:
            high = mid - 1  # try for smaller distance
    return ans

def findPages(self, arr, k):
    def is_feasible(max_sum):
        count = 1
        curr_sum = 0
        for num in arr:
            if num > max_sum:
                return False
            curr_sum += num
            if curr_sum > max_sum:
                count += 1
                curr_sum = num
        return count <= k

    if k > len(arr):
        return -1  # Not enough books

    left = max(arr)
    right = sum(arr)
    ans = -1

    while left <= right:
        mid = (left + right) // 2
        if is_feasible(mid):
            ans = mid
            right = mid - 1     # ✅ Try smaller maximum
        else:
            left = mid + 1

    return ans
