class Solution:
    memo = {}
    def fib(self, n: int) -> int:
        if n in self.memo:
            return self.memo[n]
        if n <= 1:
            return n
        self.memo[n] = self.fib(n-2) + self.fib(n-1)
        return self.memo[n]

def frogJump(heights):
    n = len(heights)
    if n == 0:
        return 0
    if n == 1:
        return 0

    dp = [0] * n
    dp[0] = 0
    dp[1] = abs(heights[1] - heights[0])

    for i in range(2, n):
        one_jump = dp[i-1] + abs(heights[i] - heights[i-1])
        two_jump = dp[i-2] + abs(heights[i] - heights[i-2])
        dp[i] = min(one_jump, two_jump)

    return dp[n-1]

def frogJumpK(heights, k):
    n = len(heights)
    dp = [float('inf')] * n
    dp[0] = 0

    for i in range(1, n):
        for j in range(1, min(k, i) + 1):
            cost = dp[i-j] + abs(heights[i] - heights[i-j])
            dp[i] = min(dp[i], cost)

    return dp[n-1]

def canCross(stones):
    if not stones or stones[1] != 1:
        return False

    n = len(stones)
    stone_index = {stone: i for i, stone in enumerate(stones)}
    dp = [set() for _ in range(n)]
    dp[0].add(0)  # From stone[0], we took a jump of 0

    for i in range(n):
        for jump in dp[i]:
            for next_jump in [jump - 1, jump, jump + 1]:
                if next_jump > 0:
                    next_pos = stones[i] + next_jump
                    if next_pos in stone_index:
                        dp[stone_index[next_pos]].add(next_jump)

    return len(dp[-1]) > 0

rob I
def rob(nums):
    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return nums[0]

    dp = [0] * n
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, n):
        dp[i] = max(dp[i-1], nums[i] + dp[i-2])

    return dp[-1]
rob II
def rob(nums):
    def rob_linear(houses):
        n = len(houses)
        if n == 0:
            return 0
        if n == 1:
            return houses[0]

        dp = [0] * n
        dp[0] = houses[0]
        dp[1] = max(houses[0], houses[1])

        for i in range(2, n):
            dp[i] = max(dp[i-1], houses[i] + dp[i-2])
        
        return dp[-1]

    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return nums[0]

    # Case 1: Exclude last house
    money1 = rob_linear(nums[:-1])

    # Case 2: Exclude first house
    money2 = rob_linear(nums[1:])

    return max(money1, money2)

Unqpaths in Grid
def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0]*(n) for i in range(m)]
        
        for i in range(m):
            if obstacleGrid[i][0] != 1:
                dp[i][0]=1
            else:
                break
        for j in range(n):
            if obstacleGrid[0][j] != 1:
                dp[0][j]=1
            else:
                break
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]                        

MinPathSum
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dp = [[0]*n for _ in range(m)]
    
        dp[0][0] = grid[0][0]
        for i in range(1,m):
            dp[i][0]= grid[i][0]+dp[i-1][0]
        for j in range(1,n):
            dp[0][j]= grid[0][j]+dp[0][j-1]

        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = grid[i][j] + min(dp[i-1][j]+dp[i][j-1])
        return dp[m-1][n-1]        
Triangle
def minimumTotal(triangle):
    # Start from the second last row and move upwards
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            # Update the current cell with the min path sum from the two adjacent cells below
            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])
    
    # The top element now contains the minimum path sum
    return triangle[0][0]

Subsets
def isSubsetSum(arr, n, sum):
    dp = [[False] * (sum + 1) for _ in range(n + 1)]

    for i in range(n + 1):
        dp[i][0] = True

    for i in range(1, n + 1):
        for j in range(1, sum + 1):
            if arr[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]

    return dp[n][sum]
#backtrack
subset = []
    i, j = n, total
    while i > 0 and j > 0:
        # If value came from dp[i-1][j], element not included
        if dp[i - 1][j]:
            i -= 1
        else:
            subset.append(arr[i - 1])  # Element included
            j -= arr[i - 1]
            i -= 1

    return True, subset[::-1]

What is dp[i - 1][j - arr[i - 1]]?
The DP table dp[i][j] answers: "Can we make sum j using the first i elements of the array?"
When we consider the i-th element (which is arr[i - 1] because the array is 0-indexed), we have two choices:
Exclude it: Check if we can make sum j without it, i.e., dp[i - 1][j].
Include it: If we use arr[i - 1], it contributes arr[i - 1] to the sum. To reach the target j, we need the remaining sum j - arr[i - 1] to be achievable using the first i - 1 elements.
dp[i - 1][j - arr[i - 1]] is a boolean that tells us whether it’s possible to form the sum j - arr[i - 1] using only the first i - 1 elements (i.e., excluding the current element).
If dp[i - 1][j - arr[i - 1]] is True, it means we can make j - arr[i - 1] with some subset of the first i - 1 elements. By adding arr[i - 1] to that subset, we can achieve the total sum j.

def perfect_sum(arr, target):
    n = len(arr)
    
    # Create a DP table where dp[i][j] is the number of subsets from the first i elements that sum to j
    dp = [[0] * (target + 1) for _ in range(n + 1)]

    # There's one subset (the empty subset) that sums to 0
    for i in range(n + 1):
        dp[i][0] = 1

    # Fill the DP table
    for i in range(1, n + 1):
        for j in range(target + 1): ## 0 is valid (in coin change qn also)
            if arr[i - 1] <= j:
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]
            else:
                dp[i][j] = dp[i - 1][j]

    return dp[n][target]

logic :target sum or given difference
target = (d + sum(arr))//2
        total_sum = sum(arr)
        if (d + total_sum) % 2 != 0 or (d + total_sum) < 0:
            return 0
req = (sum(nums)+target) // 2
        if (sum(nums)+target) % 2 == 1 or sum(nums) < abs(target):
            return 0
def subset_style_dp(values, target):
    # Initialize dp array
    dp = [False] * (target + 1)
    dp[0] = True  # Base case: sum 0 is always possible (empty subset)

    for val in values:
        for t in range(target, val - 1, -1):  # reverse to avoid reuse # forward for reuse
            dp[t] = dp[t] or dp[t - val]

    return dp[target]

Coin change I
def coinChange(self, coins: List[int], amount: int) -> int:
    max_val = amount + 1  # A placeholder for "infinity" (no. of coins can’t exceed amount)
    dp = [max_val] * (amount + 1)
    dp[0] = 0  # Base case: 0 coins to make amount 0

    for coin in coins:
        for x in range(coin, amount + 1):
            dp[x] = min(dp[x], dp[x - coin] + 1)##For each coin, we iterate through all amounts from coin to amount.

    return dp[amount] if dp[amount] != max_val else -1
Coin change II
def change(self, amount: int, coins: List[int]) -> int:
        res = [0] * (amount + 1)
        res[0] = 1
        
        for c in coins:
            for a in range(c, amount + 1):
                res[a] += res[a - c]
return res[amount]

def knapSack(self, val, wt,capacity):
        # code here
        dp = [0]* (capacity+1)
        for i in range(1, capacity + 1):
            for j in range(len(val)):
                if wt[j] <= i:
                    dp[i] = max(dp[i],dp[i-wt[j]]+val[j])
        return dp[capacity]      
Rod cutting
def cutRod(price):
    n = len(price)
    dp = [0] * (n + 1)

    # Find maximum value for all 
    # rod of length i.
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            dp[i] = max(dp[i], price[j - 1] + dp[i - j])

    return dp[n]

DP on StOCks
# 1. Best Time to Buy and Sell Stock (Single Transaction)
def maxProfit_single(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit

# 2. Best Time to Buy and Sell Stock II (Unlimited Transactions)
def maxProfit_unlimited(prices):
    profit = 0
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            profit += prices[i] - prices[i - 1]
    return profit

# 3. Best Time to Buy and Sell Stock III (At Most Two Transactions)
def maxProfit_two_transactions(prices):
    if not prices:
        return 0
    n = len(prices)
    dp = [[0]*n for _ in range(3)]
    for k in range(1, 3):
        max_diff = -prices[0]
        for i in range(1, n):
            dp[k][i] = max(dp[k][i - 1], prices[i] + max_diff)
            max_diff = max(max_diff, dp[k - 1][i] - prices[i])
    return dp[2][-1]

# 4. Best Time to Buy and Sell Stock IV (At Most k Transactions)
def maxProfit_k_transactions(k, prices):
    if not prices or k == 0:
        return 0
    n = len(prices)
    if k >= n // 2:
        return maxProfit_unlimited(prices)
    dp = [[0]*n for _ in range(k + 1)]
    for t in range(1, k + 1):
        max_diff = -prices[0]
        for d in range(1, n):
            dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff)
            max_diff = max(max_diff, dp[t - 1][d] - prices[d])
    return dp[k][-1]

# 5. Best Time to Buy and Sell Stock with Cooldown
def maxProfit_with_cooldown(prices):
    if not prices:
        return 0
    n = len(prices)
    sold, held, rest = 0, float('-inf'), 0
    for price in prices:
        prev_sold = sold
        sold = held + price
        held = max(held, rest - price)
        rest = max(rest, prev_sold)
    return max(sold, rest)

# 6. Best Time to Buy and Sell Stock with Transaction Fee
def maxProfit_with_fee(prices, fee):
    if not prices:
        return 0
    cash, hold = 0, -prices[0]
    for price in prices[1:]:
        cash = max(cash, hold + price - fee)
        hold = max(hold, cash - price)
    return cash

dp[i][t][h] = max profit at day i, with t transactions left, and h = 0/1 (holding or not)
If we don’t hold a stock (h=0):

python
Copy
Edit
dp[i][t][0] = max(
    dp[i-1][t][0],          # do nothing
    dp[i-1][t][1] + prices[i]  # sell
)
If we hold a stock (h=1):

python
Copy
Edit
dp[i][t][1] = max(
    dp[i-1][t][1],             # do nothing
    dp[i-1][t-1][0] - prices[i]  # buy (only if t > 0)
)
def maxProfit(k: int, prices: List[int]) -> int:
    n = len(prices)
    if n == 0 or k == 0:
        return 0
    
    # Optimization: if k >= n//2, it's unlimited transactions
    if k >= n // 2:
        profit = 0
        for i in range(1, n):
            profit += max(0, prices[i] - prices[i-1])
        return profit
    
    # dp[i][t][h] = max profit on day i with t transactions left and holding state h
    dp = [[[0] * 2 for _ in range(k + 1)] for _ in range(n)]
    
    # Initialize for day 0
    for t in range(k + 1):
        dp[0][t][0] = 0             # Not holding any stock
        dp[0][t][1] = -prices[0]    # Bought on day 0
    
    for i in range(1, n):
        for t in range(1, k + 1):
            dp[i][t][0] = max(dp[i-1][t][0], dp[i-1][t][1] + prices[i])       # sell
            dp[i][t][1] = max(dp[i-1][t][1], dp[i-1][t-1][0] - prices[i])     # buy
    
    return dp[n-1][k][0]  # Max profit with 0 stock in hand
| Variant               | Change                                           |
| --------------------- | ------------------------------------------------ |
| At most 1 transaction | Set `k = 1`                                      |
| Infinite transactions | Skip the `k` part entirely (no need for 3D DP)   |
| Cooldown              | Add a 1-day wait after selling (use `i-2`)       |
| Transaction Fee       | Subtract fee during selling: `+ prices[i] - fee` |

Longest increasing subsequence
import bisect

def length_of_lis(nums):
    sub = []  # This will store the smallest tail of all increasing subsequences

    for num in nums:
        # Find the index of the smallest number >= num
        i = bisect.bisect_left(sub, num)
        if i == len(sub):
            sub.append(num)  # Extend the subsequence
        else:
            sub[i] = num  # Replace to keep subsequence optimal
    return len(sub)
def lengthOfLIS(nums):
    if not nums:
        return 0
    
    n = len(nums)
    dp = [1] * n  # Each element is itself a subsequence of length 1
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

printLIS
def printLIS(nums):
    n = len(nums)
    if n == 0:
        return []
    
    # Initialize DP and prev arrays
    dp = [1] * n  # dp[i] = length of LIS ending at nums[i]
    prev = [-1] * n  # prev[i] = index of previous element in LIS
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
                prev[i] = j  # Update previous index
    
    # Find the index of the maximum value in dp (end of LIS)
    max_len = max(dp)
    last_idx = dp.index(max_len)
    
    # Reconstruct the LIS using prev array
    lis = []
    while last_idx != -1:
        lis.append(nums[last_idx])
        last_idx = prev[last_idx]
    
    return lis[::-1]  # Reverse to get increasing order
def findNumberOfLIS(nums):
    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return 1

    # Initialize arrays for length and count of LIS ending at each index
    length = [1] * n  # Length of LIS ending at index i
    count = [1] * n   # Number of LIS of length length[i] ending at index i

    # Compute LIS lengths and counts
    max_length = 1  # Track maximum LIS length
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:  # Strictly increasing
                if length[j] + 1 > length[i]:
                    # Found a longer subsequence
                    length[i] = length[j] + 1
                    count[i] = count[j]
                elif length[j] + 1 == length[i]:
                    # Found another subsequence of the same length
                    count[i] += count[j]
        max_length = max(max_length, length[i])

    # Sum counts of all LIS with maximum length
    total_count = 0
    for i in range(n):
        if length[i] == max_length:
            total_count += count[i]

    return total_count

INC+DEC
def LongestBitonicSequence(self, n : int, nums : List[int]) -> int:
        # code here
        arr = nums
        n = len(arr)
        if n == 0:
            return 0
        if n == 1:
            return 0
    
        # Step 1: Compute LIS (dp_inc)
        dp_inc = [1] * n
        for i in range(1, n):
            for j in range(i):
                if arr[i] > arr[j] and dp_inc[i] < dp_inc[j] + 1:
                    dp_inc[i] = dp_inc[j] + 1
    
        # Step 2: Compute LDS (dp_dec)
        dp_dec = [1] * n
        for i in range(n-2, -1, -1):
            for j in range(n-1, i, -1):
                if arr[i] > arr[j] and dp_dec[i] < dp_dec[j] + 1:
                    dp_dec[i] = dp_dec[j] + 1
        
        # Step 3: Compute the longest bitonic subsequence
        max_length = 0
        for i in range(n):
            if dp_inc[i] > 1 and dp_dec[i] > 1:
                max_length = max(max_length, dp_inc[i] + dp_dec[i] - 1)
        return max_length

def longestStrChain(words):
    words.sort(key=len)  # Sort by word length
    dp = {}  # dp[word] = max chain ending at word
    max_len = 1

    for word in words:
        dp[word] = 1  # Minimum chain is the word itself
        for i in range(len(word)):
            prev = word[:i] + word[i+1:]  # Remove one character
            if prev in dp:
                dp[word] = max(dp[word], dp[prev] + 1)
        max_len = max(max_len, dp[word])

    return max_len

longest common subsequence
def lcs_tabulation(X, Y):
    m = len(X)
    n = len(Y)
    dp = [[0]*(n+1) for _ in range(m+1)]
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            if X[i-1] == Y[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    return dp[m][n]
printLCS
def print_lcs(X, Y):
    m = len(X)
    n = len(Y)
    dp = [[0]*(n+1) for _ in range(m+1)]
    
    # Build the DP table
    for i in range(1, m+1):
        for j in range(1, n+1):
            if X[i-1] == Y[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    # Now trace back to find the LCS
    i, j = m, n
    lcs = []
    while i > 0 and j > 0:
        if X[i-1] == Y[j-1]:
            lcs.append(X[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    return ''.join(reversed(lcs))
longest common substring
def longestCommonSubstr(self, s1, s2):
    m = len(s1)
    n = len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    max_length = 0

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                if dp[i][j] > max_length:
                    max_length = dp[i][j]
            else:  # Fix: This should be outside the 'if' block
                dp[i][j] = 0  # Reset when characters don't match
    return max_length

def longestPalindromicSubsequence(s: str) -> int:
    return longestCommonSubsequence(s, s[::-1])

def minInsertionsToPalindrome(s: str) -> int:
    lps_length = longestCommonSubsequence(s, s[::-1])
    return len(s) - lps_length

def minInsertionsDeletions(str1: str, str2: str) -> int:
    lcs_length = longestCommonSubsequence(str1, str2)
    return len(str1) - lcs_length + len(str2) - lcs_length

def printShortestCommonSupersequence(str1: str, str2: str) -> str:
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
  
Length of SCS=len(A)+len(B)−Length of LCS
 
    # Backtrack to construct supersequence
    scs = []
    i, j = m, n
    while i > 0 or j > 0:
        if i > 0 and j > 0 and str1[i-1] == str2[j-1]:
            scs.append(str1[i-1])
            i -= 1
            j -= 1
        elif i > 0 and (j == 0 or dp[i-1][j] >= dp[i][j-1]):
            scs.append(str1[i-1])
            i -= 1
        else:
            scs.append(str2[j-1])
            j -= 1
    return "".join(reversed(scs))

def distinctSubsequences(s: str, t: str) -> int:
    m, n = len(s), len(t)
    if n > m:
        return 0
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        dp[i][0] = 1
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s[i-1] == t[j-1]:
                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] #match or skip
            else:
                dp[i][j] = dp[i-1][j] #We can only skip the current char in s

    return dp[m][n]

edit distance
def editDistance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Initialize base cases
    for i in range(m + 1):
        dp[i][0] = i  # Delete i characters to get empty string
    for j in range(n + 1):
        dp[0][j] = j  # Insert j characters to match word2[0:j]
    
    # Fill DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1]  # No operation needed
            else:
                dp[i][j] = min(
                    dp[i-1][j] + 1,   # Delete from word1
                    dp[i][j-1] + 1,   # Insert from word2
                    dp[i-1][j-1] + 1  # Replace
                )
    
    return dp[m][n]

def isMatch(self, s: str, p: str) -> bool:
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True  # empty string matches empty pattern

    for j in range(1, n + 1):
        if p[j - 1] == "*":
            dp[0][j] = dp[0][j - 1]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == "?":
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == "*":
                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]  

    return dp[m][n]

Matrix Multiplication
def matrixChainMultiplication(dimensions: list[int]) -> int:
    n = len(dimensions) - 1  # Number of matrices
    dp = [[float('inf')] * n for _ in range(n)]
    
    # Base case: single matrix requires no multiplications
    for i in range(n):
        dp[i][i] = 0
    
    for length in range(2, n + 1):        # loop over subchain lengths
        for i in range(n - length + 1):   # loop over subchain starting index
        j = i + length - 1            # calculate end index of chain
            for k in range(i, j):
                cost = (dp[i][k] + dp[k+1][j] + 
                        dimensions[i] * dimensions[k+1] * dimensions[j+1])
                dp[i][j] = min(dp[i][j], cost)
    
    return dp[0][n-1]

def minCut(s: str) -> int:
    n = len(s)

    # Step 1: Precompute all palindromic substrings using DP
    is_palindrome = [[False] * n for _ in range(n)]

    for end in range(n):
        for start in range(end + 1):
            if s[start] == s[end] and (end - start <= 2 or is_palindrome[start + 1][end - 1]):
                is_palindrome[start][end] = True

    # Step 2: DP to find the minimum cuts
    # dp[i] = minimum cuts needed for substring s[0..i]
    dp = [0] * n

    for i in range(n):
        # If s[0..i] is already a palindrome, no cut needed
        if is_palindrome[0][i]:
            dp[i] = 0
        else:
            # Try all j < i, and if s[j+1..i] is palindrome, make a cut at j
            min_cut = float('inf')
            for j in range(i):
                if is_palindrome[j + 1][i]:
                    min_cut = min(min_cut, dp[j] + 1)
            dp[i] = min_cut

    return dp[n - 1]

scheduling DP
def paintWalls(cost, time):
    n = len(cost)
    INF = float('inf')

    # dp[i]: min cost to paint i walls
    dp = [INF] * (n + 1)
    dp[0] = 0

    for i in range(n):
        new_dp = dp[:]  # copy previous dp
        for j in range(n + 1):
            if dp[j] == INF:
                continue
            paintable = min(j + time[i] + 1, n)  # one paid + time[i] free
            new_dp[paintable] = min(new_dp[paintable], dp[j] + cost[i])
        dp = new_dp

    return dp[n]
