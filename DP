class Solution:
    memo = {}
    def fib(self, n: int) -> int:
        if n in self.memo:
            return self.memo[n]
        if n <= 1:
            return n
        self.memo[n] = self.fib(n-2) + self.fib(n-1)
        return self.memo[n]

Subsets
def isSubsetSum(arr, n, sum):
    dp = [[False] * (sum + 1) for _ in range(n + 1)]

    for i in range(n + 1):
        dp[i][0] = True

    for i in range(1, n + 1):
        for j in range(1, sum + 1):
            if arr[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]

    return dp[n][sum]

What is dp[i - 1][j - arr[i - 1]]?
The DP table dp[i][j] answers: "Can we make sum j using the first i elements of the array?"
When we consider the i-th element (which is arr[i - 1] because the array is 0-indexed), we have two choices:
Exclude it: Check if we can make sum j without it, i.e., dp[i - 1][j].
Include it: If we use arr[i - 1], it contributes arr[i - 1] to the sum. To reach the target j, we need the remaining sum j - arr[i - 1] to be achievable using the first i - 1 elements.
dp[i - 1][j - arr[i - 1]] is a boolean that tells us whether it’s possible to form the sum j - arr[i - 1] using only the first i - 1 elements (i.e., excluding the current element).
If dp[i - 1][j - arr[i - 1]] is True, it means we can make j - arr[i - 1] with some subset of the first i - 1 elements. By adding arr[i - 1] to that subset, we can achieve the total sum j.

def perfect_sum(arr, target):
    n = len(arr)
    
    # Create a DP table where dp[i][j] is the number of subsets from the first i elements that sum to j
    dp = [[0] * (target + 1) for _ in range(n + 1)]

    # There's one subset (the empty subset) that sums to 0
    for i in range(n + 1):
        dp[i][0] = 1

    # Fill the DP table
    for i in range(1, n + 1):
        for j in range(target + 1): ## 0 is valid (in coin change qn also)
            if arr[i - 1] <= j:
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]
            else:
                dp[i][j] = dp[i - 1][j]

    return dp[n][target]

logic :target sum or given difference
target = (d + sum(arr))//2
        total_sum = sum(arr)
        if (d + total_sum) % 2 != 0 or (d + total_sum) < 0:
            return 0
req = (sum(nums)+target) // 2
        if (sum(nums)+target) % 2 == 1 or sum(nums) < abs(target):
            return 0

Coin change I
def coinChange(self, coins: List[int], amount: int) -> int:
    max_val = amount + 1  # A placeholder for "infinity" (no. of coins can’t exceed amount)
    dp = [max_val] * (amount + 1)
    dp[0] = 0  # Base case: 0 coins to make amount 0

    for coin in coins:
        for x in range(coin, amount + 1):
            dp[x] = min(dp[x], dp[x - coin] + 1)

    return dp[amount] if dp[amount] != max_val else -1
Coin change II
def change(self, amount: int, coins: List[int]) -> int:
        res = [0] * (amount + 1)
        res[0] = 1
        
        for c in coins:
            for a in range(c, amount + 1):
                res[a] += res[a - c]

def knapSack(self, val, wt,capacity):
        # code here
        dp = [0]* (capacity+1)
        for i in range(1, capacity + 1):
            for j in range(len(val)):
                if wt[j] <= i:
                    dp[i] = max(dp[i],dp[i-wt[j]]+val[j])
        return dp[capacity]      
        return res[amount]
Rod cutting
def cutRod(price):
    n = len(price)
    dp = [0] * (n + 1)

    # Find maximum value for all 
    # rod of length i.
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            dp[i] = max(dp[i], price[j - 1] + dp[i - j])

    return dp[n]

DP on StOCks
# 1. Best Time to Buy and Sell Stock (Single Transaction)
def maxProfit_single(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit

# 2. Best Time to Buy and Sell Stock II (Unlimited Transactions)
def maxProfit_unlimited(prices):
    profit = 0
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            profit += prices[i] - prices[i - 1]
    return profit

# 3. Best Time to Buy and Sell Stock III (At Most Two Transactions)
def maxProfit_two_transactions(prices):
    if not prices:
        return 0
    n = len(prices)
    dp = [[0]*n for _ in range(3)]
    for k in range(1, 3):
        max_diff = -prices[0]
        for i in range(1, n):
            dp[k][i] = max(dp[k][i - 1], prices[i] + max_diff)
            max_diff = max(max_diff, dp[k - 1][i] - prices[i])
    return dp[2][-1]

# 4. Best Time to Buy and Sell Stock IV (At Most k Transactions)
def maxProfit_k_transactions(k, prices):
    if not prices or k == 0:
        return 0
    n = len(prices)
    if k >= n // 2:
        return maxProfit_unlimited(prices)
    dp = [[0]*n for _ in range(k + 1)]
    for t in range(1, k + 1):
        max_diff = -prices[0]
        for d in range(1, n):
            dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff)
            max_diff = max(max_diff, dp[t - 1][d] - prices[d])
    return dp[k][-1]

# 5. Best Time to Buy and Sell Stock with Cooldown
def maxProfit_with_cooldown(prices):
    if not prices:
        return 0
    n = len(prices)
    sold, held, rest = 0, float('-inf'), 0
    for price in prices:
        prev_sold = sold
        sold = held + price
        held = max(held, rest - price)
        rest = max(rest, prev_sold)
    return max(sold, rest)

# 6. Best Time to Buy and Sell Stock with Transaction Fee
def maxProfit_with_fee(prices, fee):
    if not prices:
        return 0
    cash, hold = 0, -prices[0]
    for price in prices[1:]:
        cash = max(cash, hold + price - fee)
        hold = max(hold, cash - price)
    return cash

Longest increasing subsequence
import bisect

def length_of_lis(nums):
    sub = []  # This will store the smallest tail of all increasing subsequences

    for num in nums:
        # Find the index of the smallest number >= num
        i = bisect.bisect_left(sub, num)
        if i == len(sub):
            sub.append(num)  # Extend the subsequence
        else:
            sub[i] = num  # Replace to keep subsequence optimal
    return len(sub)
def lengthOfLIS(nums):
    if not nums:
        return 0
    
    n = len(nums)
    dp = [1] * n  # Each element is itself a subsequence of length 1
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

printLIS
def printLIS(nums):
    n = len(nums)
    if n == 0:
        return []
    
    # Initialize DP and prev arrays
    dp = [1] * n  # dp[i] = length of LIS ending at nums[i]
    prev = [-1] * n  # prev[i] = index of previous element in LIS
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
                prev[i] = j  # Update previous index
    
    # Find the index of the maximum value in dp (end of LIS)
    max_len = max(dp)
    last_idx = dp.index(max_len)
    
    # Reconstruct the LIS using prev array
    lis = []
    while last_idx != -1:
        lis.append(nums[last_idx])
        last_idx = prev[last_idx]
    
    return lis[::-1]  # Reverse to get increasing order
INC+DEC
def LongestBitonicSequence(self, n : int, nums : List[int]) -> int:
        # code here
        arr = nums
        n = len(arr)
        if n == 0:
            return 0
        if n == 1:
            return 0
    
        # Step 1: Compute LIS (dp_inc)
        dp_inc = [1] * n
        for i in range(1, n):
            for j in range(i):
                if arr[i] > arr[j] and dp_inc[i] < dp_inc[j] + 1:
                    dp_inc[i] = dp_inc[j] + 1
    
        # Step 2: Compute LDS (dp_dec)
        dp_dec = [1] * n
        for i in range(n-2, -1, -1):
            for j in range(n-1, i, -1):
                if arr[i] > arr[j] and dp_dec[i] < dp_dec[j] + 1:
                    dp_dec[i] = dp_dec[j] + 1
        
        # Step 3: Compute the longest bitonic subsequence
        max_length = 0
        for i in range(n):
            if dp_inc[i] > 1 and dp_dec[i] > 1:
                max_length = max(max_length, dp_inc[i] + dp_dec[i] - 1)
        return max_length


