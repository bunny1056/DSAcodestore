class Solution:
    memo = {}
    def fib(self, n: int) -> int:
        if n in self.memo:
            return self.memo[n]
        if n <= 1:
            return n
        self.memo[n] = self.fib(n-2) + self.fib(n-1)
        return self.memo[n]
greedy + dp
def max_pair_sum(arr, K):
    n = len(arr)
    if n < 2:
        return 0

    arr.sort()
    dp = [0] * n
    dp[0] = 0  # can't form pair with one element

    if arr[1] - arr[0] < K:
        dp[1] = arr[0] + arr[1]
    else:
        dp[1] = 0

    for i in range(2, n):
        if arr[i] - arr[i-1] < K:
            dp[i] = max(dp[i-1], dp[i-2] + arr[i] + arr[i-1])
        else:
            dp[i] = dp[i-1]

    return dp[n-1]

def frogJump(heights):
    n = len(heights)
    if n == 0:
        return 0
    if n == 1:
        return 0

    dp = [0] * n
    dp[0] = 0
    dp[1] = abs(heights[1] - heights[0])

    for i in range(2, n):
        one_jump = dp[i-1] + abs(heights[i] - heights[i-1])
        two_jump = dp[i-2] + abs(heights[i] - heights[i-2])
        dp[i] = min(one_jump, two_jump)

    return dp[n-1]

def frogJumpK(heights, k):
    n = len(heights)
    dp = [float('inf')] * n
    dp[0] = 0

    for i in range(1, n):
        for j in range(1, min(k, i) + 1):
            cost = dp[i-j] + abs(heights[i] - heights[i-j])
            dp[i] = min(dp[i], cost)

    return dp[n-1]

def canCross(stones):
    if not stones or stones[1] != 1:
        return False

    n = len(stones)
    stone_index = {stone: i for i, stone in enumerate(stones)}
    dp = [set() for _ in range(n)]
    dp[0].add(0)  # From stone[0], we took a jump of 0

    for i in range(n):
        for jump in dp[i]:
            for next_jump in [jump - 1, jump, jump + 1]:
                if next_jump > 0:
                    next_pos = stones[i] + next_jump
                    if next_pos in stone_index:
                        dp[stone_index[next_pos]].add(next_jump)

    return len(dp[-1]) > 0

def numDecodings(s: str) -> int:
    n = len(s)
    if n == 0 or s[0] == '0':
        return 0

    # dp[i] = number of ways to decode up to s[:i]
    dp = [0] * (n + 1)
    dp[0] = 1  # empty string has 1 way
    dp[1] = 1  # first digit is guaranteed not '0' here

    for i in range(2, n + 1):
        # Check 1-digit decode (s[i-1])
        if s[i-1] != '0':
            dp[i] += dp[i-1]

        # Check 2-digit decode (s[i-2:i])
        two_digit = int(s[i-2:i])
        if 10 <= two_digit <= 26:
            dp[i] += dp[i-2]

    return dp[n]

def count_towers(n):
    dp = [0] * (n + 1)
    dp[0] = 1  # base case

    for i in range(1, n + 1):
        dp[i] = (2 * dp[i - 1]) % MOD
        if i >= 2:
            dp[i] = (dp[i] + 2 * dp[i - 2]) % MOD

    return dp[n]
rob I
def rob(nums):
    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return nums[0]

    dp = [0] * n
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, n):
        dp[i] = max(dp[i-1], nums[i] + dp[i-2])

    return dp[-1]
rob II
def rob(nums):
    def rob_linear(houses):
        n = len(houses)
        if n == 0:
            return 0
        if n == 1:
            return houses[0]

        dp = [0] * n
        dp[0] = houses[0]
        dp[1] = max(houses[0], houses[1])

        for i in range(2, n):
            dp[i] = max(dp[i-1], houses[i] + dp[i-2])
        
        return dp[-1]

    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return nums[0]

    # Case 1: Exclude last house
    money1 = rob_linear(nums[:-1])

    # Case 2: Exclude first house
    money2 = rob_linear(nums[1:])

    return max(money1, money2)

Coin game
def findWinner(n, x, y):
    dp = [False] * (n + 1)  # dp[i] = True means current player can win with i coins

    for i in range(1, n + 1):
        # If any move leads to a losing position for opponent, current player can win
        if i >= 1 and not dp[i - 1]:
            dp[i] = True
        elif i >= x and not dp[i - x]:
            dp[i] = True
        elif i >= y and not dp[i - y]:
            dp[i] = True

    return "Geek" if dp[n] else "Friend"

Unqpaths in Grid
def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0]*(n) for i in range(m)]
        
        for i in range(m):
            if obstacleGrid[i][0] != 1:
                dp[i][0]=1
            else:
                break
        for j in range(n):
            if obstacleGrid[0][j] != 1:
                dp[0][j]=1
            else:
                break
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]                        

MinPathSum
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dp = [[0]*n for _ in range(m)]
    
        dp[0][0] = grid[0][0]
        for i in range(1,m):
            dp[i][0]= grid[i][0]+dp[i-1][0]
        for j in range(1,n):
            dp[0][j]= grid[0][j]+dp[0][j-1]

        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = grid[i][j] + min(dp[i-1][j]+dp[i][j-1])
        return dp[m-1][n-1]        
Triangle
def minimumTotal(triangle):
    # Start from the second last row and move upwards
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            # Update the current cell with the min path sum from the two adjacent cells below
            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])
    
    # The top element now contains the minimum path sum
    return triangle[0][0]

logic :target sum or given difference
target = (d + sum(arr))//2
        total_sum = sum(arr)
        if (d + total_sum) % 2 != 0 or (d + total_sum) < 0:
            return 0
req = (sum(nums)+target) // 2
        if (sum(nums)+target) % 2 == 1 or sum(nums) < abs(target):
            return 0
def subset_style_dp(values, target):
    # Initialize dp array
    dp = [False] * (target + 1)
    dp[0] = True  # Base case: sum 0 is always possible (empty subset)

    for val in values:
        for t in range(target, val - 1, -1):  # reverse to avoid reuse # forward for reuse
            dp[t] = dp[t] or dp[t - val]

    return dp[target]
result = []

    def backtrack(start, path, total):
        if total == target:
            result.append(path[:])  # Copy of the current path
            return True  # Return True to stop at first valid subset
        if total > target:
            return False
        
        for i in range(start, len(values)):
            path.append(values[i])
            if backtrack(i + 1, path, total + values[i]):  # i+1 to avoid reuse
                return True  # Found one valid subset
            path.pop()  # Backtrack
        
        return False

    found = backtrack(0, [], 0)
    return result[0] if found else None

#for product subsets dp[prod] += dp[prod//coin] if divisible and intialize dp[1] = 1

mindifferencesubsets
def minDifference(self, arr):
		nums = arr
		total = sum(nums)
        n = len(nums)
        target = total // 2

        dp = [False] * (target + 1)
        dp[0] = True

        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]

        for s1 in range(target, -1, -1):
            if dp[s1]:
                return abs(total - 2 * s1)

Coin change I
def coinChange(self, coins: List[int], amount: int) -> int:
    max_val = amount + 1  # A placeholder for "infinity" (no. of coins canâ€™t exceed amount)
    dp = [max_val] * (amount + 1)
    dp[0] = 0  # Base case: 0 coins to make amount 0

    for coin in coins:
        for x in range(coin, amount + 1):
            dp[x] = min(dp[x], dp[x - coin] + 1)##For each coin, we iterate through all amounts from coin to amount.

    return dp[amount] if dp[amount] != max_val else -1
Coin change II
def change(self, amount: int, coins: List[int]) -> int:
        res = [0] * (amount + 1)
        res[0] = 1
        
        for c in coins:
            for a in range(c, amount + 1): ## single usage (amount, coin -1 , -1)
                res[a] += res[a - c]
return res[amount]

def knapsack_unbounded(val, wt, capacity):
    n = len(val)
    dp = [0] * (capacity + 1)

    for i in range(n):
        # Traverse weights from low to high for multiple usage
        for w in range(wt[i], capacity + 1): #(capacity, wt[i] - 1, -1)
            dp[w] = max(dp[w], dp[w - wt[i]] + val[i])
    
    return dp[capacity]
  
Rod cutting
def cutRod(self, price: List[int]) -> int:
    n = len(price)
    dp = [0] * (n + 1)

    for i in range(n):  # i represents index in price list
        rod_length = i + 1  # piece length (1-based)
        for length in range(rod_length, n + 1):  # possible total lengths
            dp[length] = max(dp[length], price[i] + dp[length - rod_length])

    return dp[n]

def maximizeTheCuts(self,n,x,y,z):
        #code here
        dp = [float("-inf")] * (n+1)
        dp[0] = 0
        for i in range(1,n+1):
            for cut in [x,y,z]:
                if i >= cut:
                    dp[i] = max(dp[i],dp[i-cut] + 1)
        return dp[n] if dp[n] != float("-inf") else 0

DP on StOCks
# 1. Best Time to Buy and Sell Stock (Single Transaction)
def maxProfit_single(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit

# 2. Best Time to Buy and Sell Stock II (Unlimited Transactions)
def maxProfit_unlimited(prices):
    profit = 0
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            profit += prices[i] - prices[i - 1]
    return profit

# 4. Best Time to Buy and Sell Stock IV (At Most k Transactions)
def maxProfit(k: int, prices: List[int]) -> int:
    buy_k = [float('inf')] * (k + 1) #min eff cost
    profit_k = [0] * (k + 1)

    for price in prices:
        for j in range(1, k + 1): 
            buy_k[j] = min(buy_k[j], price - profit_k[j - 1])
            profit_k[j] = max(profit_k[j], price - buy_k[j])

    return profit_k[k]

# 5. Best Time to Buy and Sell Stock with Cooldown
def maxProfit_with_cooldown(prices):
    n = len(prices)
    sell, hold, cooldown = 0, -prices[0], 0
    for price in prices[1:]:
        prev_sell = sell
        sell = max(sell, sell + hold
        hold = max(hold, cooldown - price)
	cooldown = prev_sell
    return sell

# 6. Best Time to Buy and Sell Stock with Transaction Fee
def maxProfit_with_fee(prices, fee):
    cash, hold = 0, -prices[0]
    for price in prices[1:]:
        cash = max(cash, hold + price - fee)
        hold = max(hold, cash - price)
    return cash

DP on LIS
def lengthOfLIS(nums):
    if not nums:
        return 0
    
    n = len(nums)
    dp = [1] * n  # Each element is itself a subsequence of length 1
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

def maxSumIS(arr):
    n = len(arr)
    dp = arr[:]  # Initialize with arr[i], not 0
    max_sum = dp[0]
    
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + arr[i])
        max_sum = max(max_sum, dp[i])  # move this outside inner loop
    
    return max_sum

printLIS
def get_LIS_dp(nums):
    n = len(nums)
    dp = [1] * n           # LIS length ending at i
    parent = [-1] * n      # To reconstruct path

    max_len = 1
    last_index = 0

    for i in range(n):
        for j in range(i):
            if nums[i] > nums[j] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
                parent[i] = j

        if dp[i] > max_len:
            max_len = dp[i]
            last_index = i

    lis = []
    while last_index != -1:
        lis.append(nums[last_index])
        last_index = parent[last_index]

    return lis[::-1]  # Reverse to get correct order

def findNumberOfLIS(nums):
    n = len(nums)
    
    # Initialize arrays for length and count of LIS ending at each index
    length = [1] * n  # Length of LIS ending at index i
    count = [1] * n   # Number of LIS of length length[i] ending at index i

    max_length = 1  # Track maximum LIS length
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:  # Strictly increasing
                if length[j] + 1 > length[i]:
                    # Found a longer subsequence
                    length[i] = length[j] + 1
                    count[i] = count[j]
                elif length[j] + 1 == length[i]:
                    # Found another subsequence of the same length
                    count[i] += count[j]
        max_length = max(max_length, length[i])

    # Sum counts of all LIS with maximum length
    total_count = 0
    for i in range(n):
        if length[i] == max_length:
            total_count += count[i]

    return total_count

INC+DEC
def LongestBitonicSequence(self, n : int, nums : List[int]) -> int:
        # code here
        arr = nums
        n = len(arr)
        if n == 0:
            return 0
        if n == 1:
            return 0
    
        # Step 1: Compute LIS (dp_inc)
        dp_inc = [1] * n
        for i in range(1, n):
            for j in range(i):
                if arr[i] > arr[j] and dp_inc[i] < dp_inc[j] + 1:
                    dp_inc[i] = dp_inc[j] + 1
    
        # Step 2: Compute LDS (dp_dec)
        dp_dec = [1] * n
        for i in range(n-2, -1, -1):
            for j in range(n-1, i, -1):
                if arr[i] > arr[j] and dp_dec[i] < dp_dec[j] + 1:
                    dp_dec[i] = dp_dec[j] + 1
        
        # Step 3: Compute the longest bitonic subsequence
        max_length = 0
        for i in range(n):
            if dp_inc[i] > 1 and dp_dec[i] > 1:
                max_length = max(max_length, dp_inc[i] + dp_dec[i] - 1)
        return max_length

def longestStrChain(words):
    words.sort(key=len)  # Sort by word length
    dp = {}  # dp[word] = max chain ending at word
    max_len = 1

    for word in words:
        dp[word] = 1  # Minimum chain is the word itself
        for i in range(len(word)):
            prev = word[:i] + word[i+1:]  # Remove one character
            if prev in dp:
                dp[word] = max(dp[word], dp[prev] + 1)
        max_len = max(max_len, dp[word])

    return max_len

WordBreak
def wordBreak(s: str, wordDict: List[str]) -> bool:
    word_set = set(wordDict)
    n = len(s)

    # dp[i] means: can we segment s[0:i] (first i characters)?
    dp = [False] * (n + 1)
    dp[0] = True  
    for i in range(1, n + 1):
        for j in range(i): # Try all possible previous cuts (j from 0 to i)
            if dp[j] and s[j:i] in word_set: # Check if s[0:j] is segmentable AND s[j:i] is in the dictionary
                dp[i] = True  # s[0:i] can be segmented
                break         

    return dp[n]

DP on strings
longest common subsequence
def lcs_tabulation(X, Y):
    m = len(X)
    n = len(Y)
    dp = [[0]*(n+1) for _ in range(m+1)]
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            if X[i-1] == Y[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    return dp[m][n]
    # Now trace back to find the LCS
    i, j = m, n
    lcs = []
    while i > 0 and j > 0:
        if X[i-1] == Y[j-1]:
            lcs.append(X[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    return ''.join(reversed(lcs))

longest common substring
def longestCommonSubstr(self, s1, s2):
    m = len(s1)
    n = len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    max_length = 0

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                if dp[i][j] > max_length:
                    max_length = dp[i][j]
            else:  # Fix: This should be outside the 'if' block
                dp[i][j] = 0  # Reset when characters don't match
    return max_length

def longestPalindromicSubsequence(s: str) -> int:
    return longestCommonSubsequence(s, s[::-1])

def longestPalindromeLCS(s: str) -> str:
    n = len(s)
    rev_s = s[::-1]
    
    # dp[i][j] = length of LCS ending at s[i-1] and rev_s[j-1]
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    
    max_len = 0
    end_pos = 0  # End index in s
    
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if s[i - 1] == rev_s[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                # The tricky part: check if itâ€™s a valid palindrome
                # i-1 is the end index in original, j-1 is the end in reverse
                if (n - j) + dp[i][j] - 1 == i - 1:
                    if dp[i][j] > max_len:
                        max_len = dp[i][j]
                        end_pos = i
            else:
                dp[i][j] = 0

    return s[end_pos - max_len:end_pos]

def minInsertionsToPalindrome(s: str) -> int:
    lps_length = longestCommonSubsequence(s, s[::-1])
    return len(s) - lps_length

def minInsertionsDeletions(str1: str, str2: str) -> int:
    lcs_length = longestCommonSubsequence(str1, str2)
    return len(str1) - lcs_length + len(str2) - lcs_length
longest repeating sequence i!=j
def printShortestCommonSupersequence(str1: str, str2: str) -> str:
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
  
LengthÂ ofÂ SCS=len(A)+len(B)âˆ’LengthÂ ofÂ LCS
 
    # Backtrack to construct supersequence
    scs = []
    i, j = m, n
    while i > 0 or j > 0:
        if i > 0 and j > 0 and str1[i-1] == str2[j-1]:
            scs.append(str1[i-1])
            i -= 1
            j -= 1
        elif i > 0 and (j == 0 or dp[i-1][j] >= dp[i][j-1]):
            scs.append(str1[i-1])
            i -= 1
        else:
            scs.append(str2[j-1])
            j -= 1
    return "".join(reversed(scs))

def distinctSubsequences(s: str, t: str) -> int:
    m, n = len(s), len(t)
    if n > m:
        return 0
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        dp[i][0] = 1
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s[i-1] == t[j-1]:
                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] #match or skip
            else:
                dp[i][j] = dp[i-1][j] #We can only skip the current char in s

    return dp[m][n]

edit distance
def editDistance(word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Initialize base cases
    for i in range(m + 1):
        dp[i][0] = i  # Delete i characters to get empty string
    for j in range(n + 1):
        dp[0][j] = j  # Insert j characters to match word2[0:j]
    
    # Fill DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1]  # No operation needed
            else:
                dp[i][j] = min(
                    dp[i-1][j] + 1,   # Delete from word1
                    dp[i][j-1] + 1,   # Insert from word2
                    dp[i-1][j-1] + 1  # Replace
                )
    
    return dp[m][n]

def isMatch(self, s: str, p: str) -> bool:
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True  # empty string matches empty pattern

    for j in range(1, n + 1):
        if p[j - 1] == "*":
            dp[0][j] = dp[0][j - 1]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == "?":
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == "*":
                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]  

    return dp[m][n]

def isMatch(s, p):
    m, n = len(s), len(p)
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True

    # Deals with patterns like a*, a*b*, a*b*c*
    for j in range(2, n + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2]  # Zero occurrence
                if p[j - 2] == s[i - 1] or p[j - 2] == '.':
                    dp[i][j] = dp[i][j] or dp[i - 1][j]  # One or more occurrences

    return dp[m][n]

DP on Squares
maximal Square
def maximalSquare(matrix):
    if not matrix or not matrix[0]:
        return 0
## What's the size of the largest square ending at (i, j)?
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    max_side = 0

    for i in range(m):
        for j in range(n):
            if matrix[i][j] == 1:
                if i == 0 or j == 0:
                    # First row or column
                    dp[i][j] = 1
                else:
                    # Main transition
                    dp[i][j] = 1 + min(
                        dp[i-1][j],    # top
                        dp[i][j-1],    # left
                        dp[i-1][j-1]   # top-left
                    )
                max_side = max(max_side, dp[i][j])

    return max_side * max_side  # Area

def countSquares(matrix):
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    total = 0

    for i in range(m):
        for j in range(n):
            if matrix[i][j] == 1:
                if i == 0 or j == 0:
                    dp[i][j] = 1  # edges can only be 1x1 squares
                else:
                    dp[i][j] = 1 + min(
                        dp[i-1][j],    # top
                        dp[i][j-1],    # left
                        dp[i-1][j-1]   # top-left
                    )
                total += dp[i][j]

    return total

def largestZeroSumSubmatrix(matrix):
    R = len(matrix)
    C = len(matrix[0])
    max_area = 0

    for top in range(R):
        temp = [0] * C
        for bottom in range(top, R):
            # Update temp with row sums from top to bottom
            for col in range(C):
                temp[col] += matrix[bottom][col]

            # Apply subarray with sum = 0 logic on temp
            prefix_sum = 0
            sum_map = {0: -1}  # prefix_sum -> first index
            for col in range(C):
                prefix_sum += temp[col]
                if prefix_sum in sum_map:
                    # Width of subarray with sum 0
                    width = col - sum_map[prefix_sum]
                    height = bottom - top + 1
                    area = width * height
                    max_area = max(max_area, area)
                else:
                    sum_map[prefix_sum] = col

    return max_area

def largestSubmatrixEqual01(mat):
    rows, cols = len(mat), len(mat[0])

    # Step 1: Convert 0s to -1
    for i in range(rows):
        for j in range(cols):
            if mat[i][j] == 0:
                mat[i][j] = -1

    max_area = 0

    # Step 2: Fix two rows and reduce the matrix to 1D problem
    for top in range(rows):
        temp = [0] * cols  # reset for each new top row
        for bottom in range(top, rows):
            # Column-wise sum between top and bottom row
            for col in range(cols):
                temp[col] += mat[bottom][col]

            # Step 3: Use hashmap to find longest subarray with sum = 0
            prefix_sum = 0
            sum_index = {0: -1}  # base case
            for col in range(cols):
                prefix_sum += temp[col]
                if prefix_sum in sum_index:
                    length = col - sum_index[prefix_sum]
                    area = length * (bottom - top + 1)
                    max_area = max(max_area, area)
                else:
                    sum_index[prefix_sum] = col

    return max_area

DP on matrix multiplication
Matrix Multiplication
def matrixChainMultiplication(dimensions: list[int]) -> int:
    n = len(dimensions) - 1  # Number of matrices
    dp = [[float('inf')] * n for _ in range(n)]
    
    # Base case: single matrix requires no multiplications
    for i in range(n):
        dp[i][i] = 0
    
    for length in range(2, n + 1):        # loop over subchain lengths
        for i in range(n - length + 1):   # loop over subchain starting index
        j = i + length - 1            # calculate end index of chain
            for k in range(i, j):
                cost = (dp[i][k] + dp[k+1][j] + 
                        dimensions[i] * dimensions[k+1] * dimensions[j+1])
                dp[i][j] = min(dp[i][j], cost)
    
    return dp[0][n-1]

burst balloons
def maxCoins(nums):
    nums = [1] + nums + [1]
    n = len(nums)
    dp = [[0] * n for _ in range(n)]

    for length in range(2, n):  # interval size
        for i in range(n - length):
            j = i + length
            for k in range(i + 1, j):  # burst k last
                dp[i][j] = max(dp[i][j],
                               nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])

    return dp[0][n - 1]

min cost to cut the stick
def minCost(n: int, cuts: list[int]) -> int:
    # Add virtual ends
    cuts = [0] + sorted(cuts) + [n]
    m = len(cuts)

    # dp[i][j] = min cost to cut stick from cuts[i] to cuts[j]
    dp = [[0] * m for _ in range(m)]

    # interval length: from 2 to m
    for length in range(2, m):
        for i in range(m - length):
            j = i + length
            dp[i][j] = float('inf')
            for k in range(i + 1, j):  # Try every cut position in between
                cost = cuts[j] - cuts[i] + dp[i][k] + dp[k][j]
                dp[i][j] = min(dp[i][j], cost)

    return dp[0][m - 1]

def countPalindromicSubsequences(s: str) -> int:
    n = len(s)
    dp = [[0] * n for _ in range(n)]

    # Base case: single characters
    for i in range(n):
        dp[i][i] = 1

    # Fill DP table
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1

            if s[i] == s[j]:
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1
            else:
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]

    return dp[0][n - 1]

def optimalBST_knuth(keys, freq):
    n = len(keys)
    dp = [[0]*n for _ in range(n)]
    sumf = [[0]*n for _ in range(n)]
    opt = [[0]*n for _ in range(n)]

    for i in range(n):
        sumf[i][i] = freq[i]
        opt[i][i] = i
        for j in range(i+1, n):
            sumf[i][j] = sumf[i][j-1] + freq[j]

    for length in range(2, n+1):
        for i in range(n-length+1):
            j = i + length - 1
            dp[i][j] = float('inf')
            k_start, k_end = opt[i][j-1], opt[i+1][j]
            for r in range(k_start, k_end+1):
                cost = ((dp[i][r-1] if r>i else 0)
                      + (dp[r+1][j] if r<j else 0)
                      + sumf[i][j])
                if cost < dp[i][j]:
                    dp[i][j] = cost
                    opt[i][j] = r

    return dp[0][n-1]

coin game max coins
def maxCoins(arr):
    n = len(arr)
    dp = [[0] * n for _ in range(n)]

    # Base cases
    for i in range(n):
        dp[i][i] = arr[i]
    for i in range(n - 1):
        dp[i][i + 1] = max(arr[i], arr[i + 1])

    # Fill the table
    for length in range(3, n + 1):  # subarray length
        for i in range(n - length + 1):
            j = i + length - 1
            pick_i = arr[i] + min(dp[i + 2][j] if i + 2 <= j else 0,
                                  dp[i + 1][j - 1] if i + 1 <= j - 1 else 0)
            pick_j = arr[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0,
                                  dp[i][j - 2] if i <= j - 2 else 0)
            dp[i][j] = max(pick_i, pick_j)

    return dp[0][n - 1]

palindrome partitioning II
def minCut(s: str) -> int:
    n = len(s)

    # Step 1: Precompute all palindromic substrings using DP
    is_palindrome = [[False] * n for _ in range(n)]

    for end in range(n):
        for start in range(end + 1):
            if s[start] == s[end] and (end - start <= 2 or is_palindrome[start + 1][end - 1]):
                is_palindrome[start][end] = True

    # Step 2: DP to find the minimum cuts
    # dp[i] = minimum cuts needed for substring s[0..i]
    dp = [0] * n

    for i in range(n):
        # If s[0..i] is already a palindrome, no cut needed
        if is_palindrome[0][i]:
            dp[i] = 0
        else:
            # Try all j < i, and if s[j+1..i] is palindrome, make a cut at j
            min_cut = float('inf')
            for j in range(i):
                if is_palindrome[j + 1][i]:
                    min_cut = min(min_cut, dp[j] + 1)
            dp[i] = min_cut

    return dp[n - 1]

def binarySearch(jobs, idx):
    low = 0
    high = idx - 1
    ans = -1

    while low <= high:
        mid = (low + high) // 2
        if jobs[mid][1] <= jobs[idx][0]:
            ans = mid
            low = mid + 1
        else:
            high = mid - 1
    return ans

def jobScheduling(startTime, endTime, profit):
    n = len(startTime)
    jobs = list(zip(startTime, endTime, profit))
    
    # Sort jobs by end time
    jobs.sort(key=lambda x: x[1])

    dp = [0] * n
    dp[0] = jobs[0][2]

    for i in range(1, n):
        # Include current job's profit
        incl = jobs[i][2]
        # Find the last non-conflicting job
        l = binarySearch(jobs, i)
        if l != -1:
            incl += dp[l]

        # Take max of including and excluding current job
        dp[i] = max(dp[i - 1], incl)

    return dp[-1]

Paint the walls
def binarySearch(jobs, idx):
    low, high = 0, len(jobs) - 1
    ans = len(jobs)

    while low <= high:
        mid = (low + high) // 2
        if jobs[mid][0] >= jobs[idx][1]:
            ans = mid
            high = mid - 1
        else:
            low = mid + 1
    return ans

def paintWalls(cost, time):
    n = len(cost)
    jobs = []
    for i in range(n):
        start = i
        end = i + time[i]  # you're busy till this index
        jobs.append((start, end, cost[i]))

    jobs.sort(key=lambda x: x[1])  # sort by end time

    dp = [0] * n
    dp[0] = jobs[0][2]

    for i in range(1, n):
        incl = jobs[i][2]
        next_wall = binarySearch(jobs, i)
        if next_wall < n:
            incl += dp[next_wall]
        dp[i] = min(dp[i - 1], incl)

    return dp[-1]

def maxSumAfterPartitioning(arr, k):
    n = len(arr)
    dp = [0] * (n + 1)  # dp[i] stores max sum for arr[0 to i-1]

    for i in range(1, n + 1):
        curr_max = 0
        for j in range(1, min(k, i) + 1):  # Try last j elements (j <= k)
            curr_max = max(curr_max, arr[i - j])  # Max in the current window
            dp[i] = max(dp[i], dp[i - j] + curr_max * j)

    return dp[n]

def carAssembly(self, n : int, a : List[List[int]], T : List[List[int]], e : List[int], x : List[int]) -> int:
        # code here
        dp1 = [0] * (n)
        dp2 = [0] * (n)
        dp1[0] = e[0] + a[0][0]
        dp2[0] = e[1] + a[1][0]
        
        for i in range(1,n):
            dp1[i] = min(dp1[i-1] + a[0][i],dp2[i-1] + T[1][i] + a[0][i])
            dp2[i] = min(dp2[i-1] + a[1][i],dp1[i-1] + T[0][i] + a[1][i])
        
        return min(dp1[n-1]+x[0],dp2[n-1]+x[1])

Egg dropping puzzle

def superEggDrop(n: int, k: int) -> int:
    # dp[i][j] = minimum number of moves with i eggs and j floors
    dp = [[0] * (k + 1) for _ in range(n + 1)]

    for j in range(k + 1):
        dp[1][j] = j  # 1 egg needs j moves for j floors

    for i in range(2, n + 1):
        for j in range(1, k + 1):
            low, high = 1, j
            res = float('inf')
            while low <= high:
                mid = (low + high) // 2
                broken = dp[i - 1][mid - 1]  # egg breaks
                not_broken = dp[i][j - mid]  # egg survives
                worst = 1 + max(broken, not_broken)
                if broken > not_broken:
                    high = mid - 1
                else:
                    low = mid + 1
                res = min(res, worst)
            dp[i][j] = res

    return dp[n][k]

def solveWordWrap(arr, k):
    n = len(arr)
    dp = [float('inf')] * (n + 1)
    dp[n] = 0  # No cost after the last word

    for i in range(n - 1, -1, -1):
        line_len = 0
        for j in range(i, n):
            line_len += arr[j]
            if j > i:
                line_len += 1  # Add a space between words

            if line_len > k:
                break

            # If last line, no extra cost
            if j == n - 1:
                cost = 0
            else:
                cost = (k - line_len) ** 2

            dp[i] = min(dp[i], cost + dp[j + 1])

    return dp[0]

mobile number keypad
def getCount(n):
    if n <= 0:
        return 0
    if n == 1:
        return 10  # All digits (0-9) are valid single-length numbers

    # Adjacency list defining allowed moves from each key
    moves = {
        0: [0, 8],
        1: [1, 2, 4],
        2: [2, 1, 3, 5],
        3: [3, 2, 6],
        4: [4, 1, 5, 7],
        5: [5, 2, 4, 6, 8],
        6: [6, 3, 5, 9],
        7: [7, 4, 8],
        8: [8, 5, 7, 9, 0],
        9: [9, 6, 8]
    }

    # Initialize dp table with -1 (meaning uncomputed)
    dp = [[-1 for _ in range(n + 1)] for _ in range(10)]

    def count(digit, length):
        if length == 1:
            return 1
        if dp[digit][length] != -1:
            return dp[digit][length]

        total = 0
        for nei in moves[digit]:
            total += count(nei, length - 1)

        dp[digit][length] = total
        return total

    result = 0
    for digit in range(10):
        result += count(digit, n)

    return result
