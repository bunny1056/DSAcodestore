def topologicalSort(self,adj):
        
        st =[]
        n = len(adj)
        visited = [False] * n
        
        def dfs(node):
            visited[node] = True
            for neighbour in adj[node]:
                if not visited[neighbour]:
                    dfs(neighbour)
            st.append(node)
        
        for i in range(n):
            if not visited[i]:
                dfs(i)
                
        return st[::-1]

kahn's algo
from collections import deque
from typing import List

class Solution:
    def topoSort(self, V: int, adj: List[List[int]]) -> List[int]:
        in_degree = [0] * V
        for u in range(V):
            for v in adj[u]: # u â†’ v means v depends on u
                in_degree[v] += 1
        
        queue = deque()
        for i in range(V):
            if in_degree[i] == 0:
                queue.append(i)
        
        topo_order = []
        while queue:
            u = queue.popleft()
            topo_order.append(u)
            for v in adj[u]:
                in_degree[v] -= 1
                if in_degree[v] == 0:
                    queue.append(v)
        
        return topo_order if len(topo_order) == V else [] #use this fact to detect cycle in directed cycle

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        in_degree = [0] * numCourses
        V = numCourses
        adj = [[] for _ in range(V)] #build adjacency list

        for course, prereq in prerequisites:
            adj[prereq].append(course)
            in_degree[course] += 1
        
        Q = deque()
        for u in range(V):
            if in_degree[u] == 0:
                Q.append(u)

        topo_order =[]
        while Q:
            course = Q.popleft()
            topo_order.append(course)
            for prereq in adj[course]:
                in_degree[prereq] -= 1
                if in_degree[prereq] == 0:
                    Q.append(prereq)
        return topo_order if len(topo_order) == V else []
        
AlienDictionary
from collections import defaultdict, deque

def alienOrder(words):
    # Step 1: Initialize data structures
    graph = defaultdict(set)   # adjacency list
    indegree = defaultdict(int)              # count of incoming edges for each node (letter)
    
    # Initialize indegree for all unique letters
    for word in words:
        for char in word:
            indegree[char] = 0
    
    # Step 2: Build graph edges from adjacent words
    for i in range(len(words) - 1):
        w1, w2 = words[i], words[i+1]
        
        # Check prefix condition that makes ordering invalid
        if len(w1) > len(w2) and w1.startswith(w2):
            return ""
        
        # Find the first difference and create edge
        for c1, c2 in zip(w1, w2):
            if c1 != c2:
                if c2 not in graph[c1]:
                    graph[c1].add(c2)
                    indegree[c2] += 1
                break  # Only first differing char matters
    
    # Step 3: Topological sort using BFS (Kahn's algorithm)
    queue = deque([c for c in indegree if indegree[c] == 0])
    order = []
    
    while queue:
        char = queue.popleft()
        order.append(char)
        
        for nei in graph[char]:
            indegree[nei] -= 1
            if indegree[nei] == 0:
                queue.append(nei)
    
    # If order includes all unique letters, return string else ""
    if len(order) == len(indegree):
        return "".join(order)
    else:
        return ""
