pacific atlantic ocean

Number of possible edges = n(n-1)/2
Total undirected graphs = 2^(n(n-1)/2)

CLONE GRAPH
def cloneGraph(node):
    visited = {}
    def dfs(n):
        if n in visited:
            return visited[n]
        copy = Node(n.val)
        visited[n] = copy
        for neighbor in n.neighbors:
            copy.neighbors.append(dfs(neighbor))
        return copy
    return dfs(node) if node else None

from collections import deque
def cloneGraph(node):
    if not node:
        return None
    visited = {node: Node(node.val)}
    queue = deque([node])
    while queue:
        current = queue.popleft()
        for neighbor in current.neighbors:
            if neighbor not in visited:
                visited[neighbor] = Node(neighbor.val)
                queue.append(neighbor)
            visited[current].neighbors.append(visited[neighbor])
    return visited[node]

Connected Components
# Step 1: Build adjacency list
    adj = defaultdict(list)
    for u, v in edges:
        adj[u].append(v)
        adj[v].append(u)

DFS iteravtive
def connectedComponents(V, edges):
    from collections import defaultdict

    visited = [False] * V
    result = []

    # Step 2: Iterative DFS using stack
    for start in range(V):
        if not visited[start]:
            stack = [start]
            component = []

            while stack:
                node = stack.pop()
                if not visited[node]:
                    visited[node] = True
                    component.append(node)
                    # Push all unvisited neighbors onto the stack
                    for neighbor in adj[node]: #if order matters use reversed
                        if not visited[neighbor]:
                            stack.append(neighbor)

            result.append(sorted(component))  # Sort each component if needed

    return result
DFS recursive
def connectedComponents(V, edges):
    from collections import defaultdict

    visited = [False] * V
    result = []

    def dfs(node, component):
        visited[node] = True
        component.append(node)
        for neighbor in adj[node]:
            if not visited[neighbor]:
                dfs(neighbor, component)

    # Step 2: Visit each vertex
    for v in range(V):
        if not visited[v]:
            component = []
            dfs(v, component)
            result.append(sorted(component))  # Sorting each component

    return result
BFS 
from collections import defaultdict, deque

def connectedComponents(V, edges):

    visited = [False] * V
    result = []

    # Step 2: BFS for each unvisited node
    for start in range(V):
        if not visited[start]:
            queue = deque([start])
            component = []

            while queue:
                node = queue.popleft()
                if not visited[node]:
                    visited[node] = True
                    component.append(node)

                    for neighbor in adj[node]:
                        if not visited[neighbor]:
                            queue.append(neighbor)

            result.append(sorted(component))  # Sort component if needed

    return result

completene components
def countCompleteComponents(n, edges):
    # Build the adjacency list and an adjacency matrix for easy lookup
    adj_list = [[] for _ in range(n)]
    adj_matrix = [[False for _ in range(n)] for _ in range(n)]
    
    for a, b in edges:
        adj_list[a].append(b)
        adj_list[b].append(a)
        adj_matrix[a][b] = True
        adj_matrix[b][a] = True
    
    visited = [False] * n
    complete_count = 0
    
    def dfs(node, component):
        stack = [node]
        visited[node] = True
        component.append(node)
        while stack:
            current = stack.pop()
            for neighbor in adj_list[current]:
                if not visited[neighbor]:
                    visited[neighbor] = True
                    component.append(neighbor)
                    stack.append(neighbor)
        return component
    
    for i in range(n):
        if not visited[i]:
            component = dfs(i, [])
            # Check if the component is complete
            k = len(component)
            is_complete = True
            for a in range(k):
                for b in range(a + 1, k):
                    u = component[a]
                    v = component[b]
                    if not adj_matrix[u][v]:
                        is_complete = False
                        break
                if not is_complete:
                    break
            if is_complete:
                complete_count += 1
    return complete_count

increment after for
Rotten Oranges 
from collections import deque
from typing import List

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        m = len(grid)
        n = len(grid[0])
        Q = deque()
        fresh = 0

        # since we dk starting point
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    Q.append((i,j))
                elif grid[i][j] == 1:
                    fresh += 1

        if fresh == 0:
            return 0

        directions = [(-1,0),(0,1),(1,0),(0,-1)]
        minutes = 0
        
        while Q and fresh>0:
            for _ in range(len(Q)):
                r , c = Q.popleft()
                for dr ,dc in directions:
                    nr = r + dr
                    nc = c + dc
                    if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == 1:
                        grid[nr][nc] = 2
                        fresh -= 1
                        Q.append((nr,nc))
                
            minutes +=1
        return minutes if fresh == 0 else -1

Surrounded Regions
Key insight
Edge 'O's cannot be captured because they're not fully surrounded by 'X's.
Any 'O' connected (directly/indirectly) to an edge 'O' also cannot be captured.
Only 'O's completely enclosed by 'X's (with no connection to edges) should be flipped.
Approach 
Mark Edge 'O's and Their Connections:
Use BFS (queue) to propagate from edge 'O's to all connected 'O's.
Mark them as 'T' to indicate they're safe from flipping.
Process the Queue:
For each 'O' in the queue, check its 4-directional neighbors.
If neighbor is 'O', mark it as 'T' and add to queue (to continue BFS).
Final Flip & Restore:
After BFS completes, all remaining 'O's are surrounded â†’ flip them to 'X'.
Restore 'T's to 'O's.

from collections import deque

def solve(board):
    if not board:
        return
    
    m, n = len(board), len(board[0])
    queue = deque()

    # Step 1: Mark edge 'O's and their connected 'O's as 'T' (BFS)
    for i in range(m):
        for j in range(n):
            if (i == 0 or i == m-1 or j == 0 or j == n-1) and board[i][j] == 'O':
                queue.append((i, j))
                board[i][j] = 'T'
                while queue:
                    r, c = queue.popleft()
                    for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < m and 0 <= nc < n and board[nr][nc] == 'O':
                            board[nr][nc] = 'T'
                            queue.append((nr, nc))

    # Step 2: Flip remaining 'O's to 'X' and restore 'T's to 'O's
    for i in range(m):
        for j in range(n):
            if board[i][j] == 'O':
                board[i][j] = 'X'
            elif board[i][j] == 'T':
                board[i][j] = 'O'
DFS
def solve(board):
    if not board:
        return
    
    m, n = len(board), len(board[0])

    def dfs(i, j):
        if 0 <= i < m and 0 <= j < n and board[i][j] == 'O':
            board[i][j] = 'T'
            dfs(i+1, j)
            dfs(i-1, j)
            dfs(i, j+1)
            dfs(i, j-1)

    # Step 1: Mark edge 'O's and their connected 'O's as 'T' (DFS)
    for i in range(m):
        for j in range(n):
            if (i == 0 or i == m-1 or j == 0 or j == n-1) and board[i][j] == 'O':
                dfs(i, j)

    # Step 2: Flip remaining 'O's to 'X' and restore 'T's to 'O's
    for i in range(m):
        for j in range(n):
            if board[i][j] == 'O':
                board[i][j] = 'X'
            elif board[i][j] == 'T':
                board[i][j] = 'O'
WORD LADDER
def ladderLength(beginWord, endWord, wordList):
    wordSet = set(wordList)
    if endWord not in wordSet:
        return 0
    if beginWord in wordSet:
        wordSet.remove(beginWord)
    
    queue = deque([(beginWord, 1)])
    
    while queue:
        word, length = queue.popleft()
        if word == endWord:
            return length
        
        for i in range(len(word)):
            for c in 'abcdefghijklmnopqrstuvwxyz':
                next_word = word[:i] + c + word[i+1:]
                if next_word in wordSet:
                    wordSet.remove(next_word)
                    queue.append((next_word, length + 1))
    
    return 0

WordLadder II
from collections import deque
from typing import List

def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
    Q = deque()
    Q.append(beginWord)
    wordSet = set(wordList)

    if endWord not in wordList:
        return []
    
    parents = defaultdict(list)  # Changed to defaultdict
    parents[beginWord] = []  # Begin word has no parents
    found = False

    while Q and not found:
        visited_this_level = set()
        for _ in range(len(Q)):
            word = Q.popleft()
            for i in range(len(word)):
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    next_word = word[:i] + c + word[i+1:]

                    if next_word == endWord:
                        found = True
                        parents[next_word].append(word)  # Now works with defaultdict

                    elif next_word in wordSet:
                        if next_word not in visited_this_level:
                            Q.append(next_word)
                            visited_this_level.add(next_word)
                            parents[next_word].append(word)
                        else:
                            parents[next_word].append(word)

        wordSet -= visited_this_level
    
    result = []

    def backtrack(node, path):
        if node == beginWord:
            result.append(path[::-1])
            return
        for parent in parents[node]:
            backtrack(parent, path + [parent])
    
    backtrack(endWord, [endWord])
    return result

word search I
from typing import List

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m, n = len(board), len(board[0])

        def dfs(r, c, index):
            # If full word is matched
            if index == len(word):
                return True
            
            # Boundary or character mismatch
            if r < 0 or r >= m or c < 0 or c >= n or board[r][c] != word[index]:
                return False

            # Mark as visited by temporary replacement
            temp = board[r][c]
            board[r][c] = '#'

            # Explore all 4 directions
            for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
                if dfs(r + dr, c + dc, index + 1):
                    return True

            # Backtrack
            board[r][c] = temp
            return False

        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0]:
                    if dfs(i, j, 0):
                        return True
        return False

Bipartite!
def isBipartite(self, graph: List[List[int]]) -> bool:
        V = len(graph)
        visited = [False]*V
        color = [-1]*V

        def dfs(i):
            st=[i]
            color[i] = 0
            while st:
                node = st.pop()
                for neighbour in graph[node]:
                    if color[neighbour] == -1:
                        color[neighbour] = 1 - color[node]
                        st.append(neighbour) 
                    elif color[neighbour] == color[node]:
                        return False
            return True 

        for i in range(V):
            if color[i] == -1:
                if not dfs(i):
                    return False
        return True

CYCLE DETECTION
UNDIRECTED
DFS
def has_cycle_undirected_dfs(graph):
    visited = set()
    
    def dfs(node, parent):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                if dfs(neighbor, node):  # Recursive call
                    return True
            elif neighbor != parent:  # Cycle detected
                return True
        return False
    
    for node in graph:
        if node not in visited:
            if dfs(node, None):
                return True
    return False
BFS
from collections import deque, defaultdict

def has_cycle_undirected_bfs(graph):
    visited = set()
    
    for node in graph:
        if node not in visited:
            queue = deque()
            queue.append((node, None))  # (current, parent)
            visited.add(node)
            
            while queue:
                current, parent = queue.popleft()
                for neighbor in graph[current]:
                    if neighbor not in visited:
                        visited.add(neighbor)
                        queue.append((neighbor, current))
                    elif neighbor != parent:
                        return True
    return False

DIRECTED
DFS
def has_cycle_directed_dfs(graph):
    visited = set()
    recursion_stack = set()
    
    def dfs(node):
        visited.add(node)
        recursion_stack.add(node)
        
        for neighbor in graph[node]:
            if neighbor not in visited:
                if dfs(neighbor):
                    return True
            elif neighbor in recursion_stack:
                return True
        
        recursion_stack.remove(node)
        return False
    
    for node in graph:
        if node not in visited:
            if dfs(node):
                return True
    return False

BFS
from collections import deque, defaultdict

def has_cycle_directed_bfs(graph):
    in_degree = defaultdict(int)
    
    # Calculate in-degree for each node
    for node in graph:
        for neighbor in graph[node]:
            in_degree[neighbor] += 1
    
    queue = deque()
    # Enqueue nodes with 0 in-degree
    for node in graph:
        if in_degree[node] == 0:
            queue.append(node)
    
    count = 0
    while queue:
        node = queue.popleft()
        count += 1
        
        for neighbor in graph[node]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)
    
    # If count doesn't match total nodes, cycle exists
    return count != len(graph)

def numIslands(grid):
    if not grid:
        return 0

    rows, cols = len(grid), len(grid[0])
    count = 0

    def dfs(r, c):
        # Check boundaries and if current cell is land '1'
        if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != '1':
            return
        # Mark current cell as visited by changing it to '0'
        grid[r][c] = '0'
        # Visit all four adjacent cells (up, down, left, right)
        dfs(r+1, c)
        dfs(r-1, c)
        dfs(r, c+1)
        dfs(r, c-1)

    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1':
                count += 1
                dfs(r, c)

    return count

from collections import deque

def numIslands(grid):
    if not grid:
        return 0

    rows, cols = len(grid), len(grid[0])
    count = 0

    def bfs(r, c):
        queue = deque()
        queue.append((r, c))
        grid[r][c] = '0'  # mark as visited

        while queue:
            row, col = queue.popleft()
            # Check all 4 directions
            for x, y in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:
                if 0 <= x < rows and 0 <= y < cols and grid[x][y] == '1':
                    grid[x][y] = '0'  # mark as visited
                    queue.append((x, y))

    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1':
                count += 1
                bfs(r, c)

    return count

from typing import List
from collections import deque

class Solution:
    def findShortestPath(self, mat: List[List[int]]) -> int:
        m, n = len(mat), len(mat[0])
        dirs = [(-1,0), (0,-1), (1,0), (0,1)]

        def is_valid(r, c):
            if mat[r][c] != 1:
                return False
            for dr, dc in dirs:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and mat[nr][nc] == 0:
                    return False
            return True

        queue = deque()
        visited = [[False] * n for _ in range(m)]

        # Start from all valid cells in first column
        for i in range(m):
            if is_valid(i, 0):
                queue.append((i, 0, 1))  # (row, col, steps)
                visited[i][0] = True

        while queue:
            r, c, dist = queue.popleft()
            if c == n - 1:
                return dist  # shortest path to last column

            for dr, dc in dirs:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc] and is_valid(nr, nc):
                    visited[nr][nc] = True
                    queue.append((nr, nc, dist + 1))

        return -1  # no path










                
        
        


